// autogenerated with dialgen. do not edit.

package ualberta

import (
	"github.com/gswly/gomavlib"
)

var Version = 3

// common.xml

type MessageHeartbeat struct {
	Type           uint8
	Autopilot      uint8
	BaseMode       uint8
	CustomMode     uint32
	SystemStatus   uint8
	MavlinkVersion uint8
}

func (*MessageHeartbeat) GetId() uint32 {
	return 0
}

type MessageSysStatus struct {
	OnboardControlSensorsPresent uint32
	OnboardControlSensorsEnabled uint32
	OnboardControlSensorsHealth  uint32
	Load                         uint16
	VoltageBattery               uint16
	CurrentBattery               int16
	BatteryRemaining             int8
	DropRateComm                 uint16
	ErrorsComm                   uint16
	ErrorsCount1                 uint16
	ErrorsCount2                 uint16
	ErrorsCount3                 uint16
	ErrorsCount4                 uint16
}

func (*MessageSysStatus) GetId() uint32 {
	return 1
}

type MessageSystemTime struct {
	TimeUnixUsec uint64
	TimeBootMs   uint32
}

func (*MessageSystemTime) GetId() uint32 {
	return 2
}

type MessagePing struct {
	TimeUsec        uint64
	Seq             uint32
	TargetSystem    uint8
	TargetComponent uint8
}

func (*MessagePing) GetId() uint32 {
	return 4
}

type MessageChangeOperatorControl struct {
	TargetSystem   uint8
	ControlRequest uint8
	Version        uint8
	Passkey        string `mavlen:"25"`
}

func (*MessageChangeOperatorControl) GetId() uint32 {
	return 5
}

type MessageChangeOperatorControlAck struct {
	GcsSystemId    uint8
	ControlRequest uint8
	Ack            uint8
}

func (*MessageChangeOperatorControlAck) GetId() uint32 {
	return 6
}

type MessageAuthKey struct {
	Key string `mavlen:"32"`
}

func (*MessageAuthKey) GetId() uint32 {
	return 7
}

type MessageSetMode struct {
	TargetSystem uint8
	BaseMode     uint8
	CustomMode   uint32
}

func (*MessageSetMode) GetId() uint32 {
	return 11
}

type MessageParamRequestRead struct {
	TargetSystem    uint8
	TargetComponent uint8
	ParamId         string `mavlen:"16"`
	ParamIndex      int16
}

func (*MessageParamRequestRead) GetId() uint32 {
	return 20
}

type MessageParamRequestList struct {
	TargetSystem    uint8
	TargetComponent uint8
}

func (*MessageParamRequestList) GetId() uint32 {
	return 21
}

type MessageParamValue struct {
	ParamId    string `mavlen:"16"`
	ParamValue float32
	ParamType  uint8
	ParamCount uint16
	ParamIndex uint16
}

func (*MessageParamValue) GetId() uint32 {
	return 22
}

type MessageParamSet struct {
	TargetSystem    uint8
	TargetComponent uint8
	ParamId         string `mavlen:"16"`
	ParamValue      float32
	ParamType       uint8
}

func (*MessageParamSet) GetId() uint32 {
	return 23
}

type MessageGpsRawInt struct {
	TimeUsec          uint64
	FixType           uint8
	Lat               int32
	Lon               int32
	Alt               int32
	Eph               uint16
	Epv               uint16
	Vel               uint16
	Cog               uint16
	SatellitesVisible uint8
	AltEllipsoid      int32  `mavext:"true"`
	HAcc              uint32 `mavext:"true"`
	VAcc              uint32 `mavext:"true"`
	VelAcc            uint32 `mavext:"true"`
	HdgAcc            uint32 `mavext:"true"`
}

func (*MessageGpsRawInt) GetId() uint32 {
	return 24
}

type MessageGpsStatus struct {
	SatellitesVisible  uint8
	SatellitePrn       [20]uint8
	SatelliteUsed      [20]uint8
	SatelliteElevation [20]uint8
	SatelliteAzimuth   [20]uint8
	SatelliteSnr       [20]uint8
}

func (*MessageGpsStatus) GetId() uint32 {
	return 25
}

type MessageScaledImu struct {
	TimeBootMs uint32
	Xacc       int16
	Yacc       int16
	Zacc       int16
	Xgyro      int16
	Ygyro      int16
	Zgyro      int16
	Xmag       int16
	Ymag       int16
	Zmag       int16
}

func (*MessageScaledImu) GetId() uint32 {
	return 26
}

type MessageRawImu struct {
	TimeUsec uint64
	Xacc     int16
	Yacc     int16
	Zacc     int16
	Xgyro    int16
	Ygyro    int16
	Zgyro    int16
	Xmag     int16
	Ymag     int16
	Zmag     int16
}

func (*MessageRawImu) GetId() uint32 {
	return 27
}

type MessageRawPressure struct {
	TimeUsec    uint64
	PressAbs    int16
	PressDiff1  int16
	PressDiff2  int16
	Temperature int16
}

func (*MessageRawPressure) GetId() uint32 {
	return 28
}

type MessageScaledPressure struct {
	TimeBootMs  uint32
	PressAbs    float32
	PressDiff   float32
	Temperature int16
}

func (*MessageScaledPressure) GetId() uint32 {
	return 29
}

type MessageAttitude struct {
	TimeBootMs uint32
	Roll       float32
	Pitch      float32
	Yaw        float32
	Rollspeed  float32
	Pitchspeed float32
	Yawspeed   float32
}

func (*MessageAttitude) GetId() uint32 {
	return 30
}

type MessageAttitudeQuaternion struct {
	TimeBootMs uint32
	Q1         float32
	Q2         float32
	Q3         float32
	Q4         float32
	Rollspeed  float32
	Pitchspeed float32
	Yawspeed   float32
}

func (*MessageAttitudeQuaternion) GetId() uint32 {
	return 31
}

type MessageLocalPositionNed struct {
	TimeBootMs uint32
	X          float32
	Y          float32
	Z          float32
	Vx         float32
	Vy         float32
	Vz         float32
}

func (*MessageLocalPositionNed) GetId() uint32 {
	return 32
}

type MessageGlobalPositionInt struct {
	TimeBootMs  uint32
	Lat         int32
	Lon         int32
	Alt         int32
	RelativeAlt int32
	Vx          int16
	Vy          int16
	Vz          int16
	Hdg         uint16
}

func (*MessageGlobalPositionInt) GetId() uint32 {
	return 33
}

type MessageRcChannelsScaled struct {
	TimeBootMs  uint32
	Port        uint8
	Chan1Scaled int16
	Chan2Scaled int16
	Chan3Scaled int16
	Chan4Scaled int16
	Chan5Scaled int16
	Chan6Scaled int16
	Chan7Scaled int16
	Chan8Scaled int16
	Rssi        uint8
}

func (*MessageRcChannelsScaled) GetId() uint32 {
	return 34
}

type MessageRcChannelsRaw struct {
	TimeBootMs uint32
	Port       uint8
	Chan1Raw   uint16
	Chan2Raw   uint16
	Chan3Raw   uint16
	Chan4Raw   uint16
	Chan5Raw   uint16
	Chan6Raw   uint16
	Chan7Raw   uint16
	Chan8Raw   uint16
	Rssi       uint8
}

func (*MessageRcChannelsRaw) GetId() uint32 {
	return 35
}

type MessageServoOutputRaw struct {
	TimeUsec   uint32
	Port       uint8
	Servo1Raw  uint16
	Servo2Raw  uint16
	Servo3Raw  uint16
	Servo4Raw  uint16
	Servo5Raw  uint16
	Servo6Raw  uint16
	Servo7Raw  uint16
	Servo8Raw  uint16
	Servo9Raw  uint16 `mavext:"true"`
	Servo10Raw uint16 `mavext:"true"`
	Servo11Raw uint16 `mavext:"true"`
	Servo12Raw uint16 `mavext:"true"`
	Servo13Raw uint16 `mavext:"true"`
	Servo14Raw uint16 `mavext:"true"`
	Servo15Raw uint16 `mavext:"true"`
	Servo16Raw uint16 `mavext:"true"`
}

func (*MessageServoOutputRaw) GetId() uint32 {
	return 36
}

type MessageMissionRequestPartialList struct {
	TargetSystem    uint8
	TargetComponent uint8
	StartIndex      int16
	EndIndex        int16
	MissionType     uint8 `mavext:"true"`
}

func (*MessageMissionRequestPartialList) GetId() uint32 {
	return 37
}

type MessageMissionWritePartialList struct {
	TargetSystem    uint8
	TargetComponent uint8
	StartIndex      int16
	EndIndex        int16
	MissionType     uint8 `mavext:"true"`
}

func (*MessageMissionWritePartialList) GetId() uint32 {
	return 38
}

type MessageMissionItem struct {
	TargetSystem    uint8
	TargetComponent uint8
	Seq             uint16
	Frame           uint8
	Command         uint16
	Current         uint8
	Autocontinue    uint8
	Param1          float32
	Param2          float32
	Param3          float32
	Param4          float32
	X               float32
	Y               float32
	Z               float32
	MissionType     uint8 `mavext:"true"`
}

func (*MessageMissionItem) GetId() uint32 {
	return 39
}

type MessageMissionRequest struct {
	TargetSystem    uint8
	TargetComponent uint8
	Seq             uint16
	MissionType     uint8 `mavext:"true"`
}

func (*MessageMissionRequest) GetId() uint32 {
	return 40
}

type MessageMissionSetCurrent struct {
	TargetSystem    uint8
	TargetComponent uint8
	Seq             uint16
}

func (*MessageMissionSetCurrent) GetId() uint32 {
	return 41
}

type MessageMissionCurrent struct {
	Seq uint16
}

func (*MessageMissionCurrent) GetId() uint32 {
	return 42
}

type MessageMissionRequestList struct {
	TargetSystem    uint8
	TargetComponent uint8
	MissionType     uint8 `mavext:"true"`
}

func (*MessageMissionRequestList) GetId() uint32 {
	return 43
}

type MessageMissionCount struct {
	TargetSystem    uint8
	TargetComponent uint8
	Count           uint16
	MissionType     uint8 `mavext:"true"`
}

func (*MessageMissionCount) GetId() uint32 {
	return 44
}

type MessageMissionClearAll struct {
	TargetSystem    uint8
	TargetComponent uint8
	MissionType     uint8 `mavext:"true"`
}

func (*MessageMissionClearAll) GetId() uint32 {
	return 45
}

type MessageMissionItemReached struct {
	Seq uint16
}

func (*MessageMissionItemReached) GetId() uint32 {
	return 46
}

type MessageMissionAck struct {
	TargetSystem    uint8
	TargetComponent uint8
	Type            uint8
	MissionType     uint8 `mavext:"true"`
}

func (*MessageMissionAck) GetId() uint32 {
	return 47
}

type MessageSetGpsGlobalOrigin struct {
	TargetSystem uint8
	Latitude     int32
	Longitude    int32
	Altitude     int32
	TimeUsec     uint64 `mavext:"true"`
}

func (*MessageSetGpsGlobalOrigin) GetId() uint32 {
	return 48
}

type MessageGpsGlobalOrigin struct {
	Latitude  int32
	Longitude int32
	Altitude  int32
	TimeUsec  uint64 `mavext:"true"`
}

func (*MessageGpsGlobalOrigin) GetId() uint32 {
	return 49
}

type MessageParamMapRc struct {
	TargetSystem            uint8
	TargetComponent         uint8
	ParamId                 string `mavlen:"16"`
	ParamIndex              int16
	ParameterRcChannelIndex uint8
	ParamValue0             float32
	Scale                   float32
	ParamValueMin           float32
	ParamValueMax           float32
}

func (*MessageParamMapRc) GetId() uint32 {
	return 50
}

type MessageMissionRequestInt struct {
	TargetSystem    uint8
	TargetComponent uint8
	Seq             uint16
	MissionType     uint8 `mavext:"true"`
}

func (*MessageMissionRequestInt) GetId() uint32 {
	return 51
}

type MessageSafetySetAllowedArea struct {
	TargetSystem    uint8
	TargetComponent uint8
	Frame           uint8
	P1x             float32
	P1y             float32
	P1z             float32
	P2x             float32
	P2y             float32
	P2z             float32
}

func (*MessageSafetySetAllowedArea) GetId() uint32 {
	return 54
}

type MessageSafetyAllowedArea struct {
	Frame uint8
	P1x   float32
	P1y   float32
	P1z   float32
	P2x   float32
	P2y   float32
	P2z   float32
}

func (*MessageSafetyAllowedArea) GetId() uint32 {
	return 55
}

type MessageAttitudeQuaternionCov struct {
	TimeUsec   uint64
	Q          [4]float32
	Rollspeed  float32
	Pitchspeed float32
	Yawspeed   float32
	Covariance [9]float32
}

func (*MessageAttitudeQuaternionCov) GetId() uint32 {
	return 61
}

type MessageNavControllerOutput struct {
	NavRoll       float32
	NavPitch      float32
	NavBearing    int16
	TargetBearing int16
	WpDist        uint16
	AltError      float32
	AspdError     float32
	XtrackError   float32
}

func (*MessageNavControllerOutput) GetId() uint32 {
	return 62
}

type MessageGlobalPositionIntCov struct {
	TimeUsec      uint64
	EstimatorType uint8
	Lat           int32
	Lon           int32
	Alt           int32
	RelativeAlt   int32
	Vx            float32
	Vy            float32
	Vz            float32
	Covariance    [36]float32
}

func (*MessageGlobalPositionIntCov) GetId() uint32 {
	return 63
}

type MessageLocalPositionNedCov struct {
	TimeUsec      uint64
	EstimatorType uint8
	X             float32
	Y             float32
	Z             float32
	Vx            float32
	Vy            float32
	Vz            float32
	Ax            float32
	Ay            float32
	Az            float32
	Covariance    [45]float32
}

func (*MessageLocalPositionNedCov) GetId() uint32 {
	return 64
}

type MessageRcChannels struct {
	TimeBootMs uint32
	Chancount  uint8
	Chan1Raw   uint16
	Chan2Raw   uint16
	Chan3Raw   uint16
	Chan4Raw   uint16
	Chan5Raw   uint16
	Chan6Raw   uint16
	Chan7Raw   uint16
	Chan8Raw   uint16
	Chan9Raw   uint16
	Chan10Raw  uint16
	Chan11Raw  uint16
	Chan12Raw  uint16
	Chan13Raw  uint16
	Chan14Raw  uint16
	Chan15Raw  uint16
	Chan16Raw  uint16
	Chan17Raw  uint16
	Chan18Raw  uint16
	Rssi       uint8
}

func (*MessageRcChannels) GetId() uint32 {
	return 65
}

type MessageRequestDataStream struct {
	TargetSystem    uint8
	TargetComponent uint8
	ReqStreamId     uint8
	ReqMessageRate  uint16
	StartStop       uint8
}

func (*MessageRequestDataStream) GetId() uint32 {
	return 66
}

type MessageDataStream struct {
	StreamId    uint8
	MessageRate uint16
	OnOff       uint8
}

func (*MessageDataStream) GetId() uint32 {
	return 67
}

type MessageManualControl struct {
	Target  uint8
	X       int16
	Y       int16
	Z       int16
	R       int16
	Buttons uint16
}

func (*MessageManualControl) GetId() uint32 {
	return 69
}

type MessageRcChannelsOverride struct {
	TargetSystem    uint8
	TargetComponent uint8
	Chan1Raw        uint16
	Chan2Raw        uint16
	Chan3Raw        uint16
	Chan4Raw        uint16
	Chan5Raw        uint16
	Chan6Raw        uint16
	Chan7Raw        uint16
	Chan8Raw        uint16
	Chan9Raw        uint16 `mavext:"true"`
	Chan10Raw       uint16 `mavext:"true"`
	Chan11Raw       uint16 `mavext:"true"`
	Chan12Raw       uint16 `mavext:"true"`
	Chan13Raw       uint16 `mavext:"true"`
	Chan14Raw       uint16 `mavext:"true"`
	Chan15Raw       uint16 `mavext:"true"`
	Chan16Raw       uint16 `mavext:"true"`
	Chan17Raw       uint16 `mavext:"true"`
	Chan18Raw       uint16 `mavext:"true"`
}

func (*MessageRcChannelsOverride) GetId() uint32 {
	return 70
}

type MessageMissionItemInt struct {
	TargetSystem    uint8
	TargetComponent uint8
	Seq             uint16
	Frame           uint8
	Command         uint16
	Current         uint8
	Autocontinue    uint8
	Param1          float32
	Param2          float32
	Param3          float32
	Param4          float32
	X               int32
	Y               int32
	Z               float32
	MissionType     uint8 `mavext:"true"`
}

func (*MessageMissionItemInt) GetId() uint32 {
	return 73
}

type MessageVfrHud struct {
	Airspeed    float32
	Groundspeed float32
	Heading     int16
	Throttle    uint16
	Alt         float32
	Climb       float32
}

func (*MessageVfrHud) GetId() uint32 {
	return 74
}

type MessageCommandInt struct {
	TargetSystem    uint8
	TargetComponent uint8
	Frame           uint8
	Command         uint16
	Current         uint8
	Autocontinue    uint8
	Param1          float32
	Param2          float32
	Param3          float32
	Param4          float32
	X               int32
	Y               int32
	Z               float32
}

func (*MessageCommandInt) GetId() uint32 {
	return 75
}

type MessageCommandLong struct {
	TargetSystem    uint8
	TargetComponent uint8
	Command         uint16
	Confirmation    uint8
	Param1          float32
	Param2          float32
	Param3          float32
	Param4          float32
	Param5          float32
	Param6          float32
	Param7          float32
}

func (*MessageCommandLong) GetId() uint32 {
	return 76
}

type MessageCommandAck struct {
	Command         uint16
	Result          uint8
	Progress        uint8 `mavext:"true"`
	ResultParam2    int32 `mavext:"true"`
	TargetSystem    uint8 `mavext:"true"`
	TargetComponent uint8 `mavext:"true"`
}

func (*MessageCommandAck) GetId() uint32 {
	return 77
}

type MessageManualSetpoint struct {
	TimeBootMs           uint32
	Roll                 float32
	Pitch                float32
	Yaw                  float32
	Thrust               float32
	ModeSwitch           uint8
	ManualOverrideSwitch uint8
}

func (*MessageManualSetpoint) GetId() uint32 {
	return 81
}

type MessageSetAttitudeTarget struct {
	TimeBootMs      uint32
	TargetSystem    uint8
	TargetComponent uint8
	TypeMask        uint8
	Q               [4]float32
	BodyRollRate    float32
	BodyPitchRate   float32
	BodyYawRate     float32
	Thrust          float32
}

func (*MessageSetAttitudeTarget) GetId() uint32 {
	return 82
}

type MessageAttitudeTarget struct {
	TimeBootMs    uint32
	TypeMask      uint8
	Q             [4]float32
	BodyRollRate  float32
	BodyPitchRate float32
	BodyYawRate   float32
	Thrust        float32
}

func (*MessageAttitudeTarget) GetId() uint32 {
	return 83
}

type MessageSetPositionTargetLocalNed struct {
	TimeBootMs      uint32
	TargetSystem    uint8
	TargetComponent uint8
	CoordinateFrame uint8
	TypeMask        uint16
	X               float32
	Y               float32
	Z               float32
	Vx              float32
	Vy              float32
	Vz              float32
	Afx             float32
	Afy             float32
	Afz             float32
	Yaw             float32
	YawRate         float32
}

func (*MessageSetPositionTargetLocalNed) GetId() uint32 {
	return 84
}

type MessagePositionTargetLocalNed struct {
	TimeBootMs      uint32
	CoordinateFrame uint8
	TypeMask        uint16
	X               float32
	Y               float32
	Z               float32
	Vx              float32
	Vy              float32
	Vz              float32
	Afx             float32
	Afy             float32
	Afz             float32
	Yaw             float32
	YawRate         float32
}

func (*MessagePositionTargetLocalNed) GetId() uint32 {
	return 85
}

type MessageSetPositionTargetGlobalInt struct {
	TimeBootMs      uint32
	TargetSystem    uint8
	TargetComponent uint8
	CoordinateFrame uint8
	TypeMask        uint16
	LatInt          int32
	LonInt          int32
	Alt             float32
	Vx              float32
	Vy              float32
	Vz              float32
	Afx             float32
	Afy             float32
	Afz             float32
	Yaw             float32
	YawRate         float32
}

func (*MessageSetPositionTargetGlobalInt) GetId() uint32 {
	return 86
}

type MessagePositionTargetGlobalInt struct {
	TimeBootMs      uint32
	CoordinateFrame uint8
	TypeMask        uint16
	LatInt          int32
	LonInt          int32
	Alt             float32
	Vx              float32
	Vy              float32
	Vz              float32
	Afx             float32
	Afy             float32
	Afz             float32
	Yaw             float32
	YawRate         float32
}

func (*MessagePositionTargetGlobalInt) GetId() uint32 {
	return 87
}

type MessageLocalPositionNedSystemGlobalOffset struct {
	TimeBootMs uint32
	X          float32
	Y          float32
	Z          float32
	Roll       float32
	Pitch      float32
	Yaw        float32
}

func (*MessageLocalPositionNedSystemGlobalOffset) GetId() uint32 {
	return 89
}

type MessageHilState struct {
	TimeUsec   uint64
	Roll       float32
	Pitch      float32
	Yaw        float32
	Rollspeed  float32
	Pitchspeed float32
	Yawspeed   float32
	Lat        int32
	Lon        int32
	Alt        int32
	Vx         int16
	Vy         int16
	Vz         int16
	Xacc       int16
	Yacc       int16
	Zacc       int16
}

func (*MessageHilState) GetId() uint32 {
	return 90
}

type MessageHilControls struct {
	TimeUsec      uint64
	RollAilerons  float32
	PitchElevator float32
	YawRudder     float32
	Throttle      float32
	Aux1          float32
	Aux2          float32
	Aux3          float32
	Aux4          float32
	Mode          uint8
	NavMode       uint8
}

func (*MessageHilControls) GetId() uint32 {
	return 91
}

type MessageHilRcInputsRaw struct {
	TimeUsec  uint64
	Chan1Raw  uint16
	Chan2Raw  uint16
	Chan3Raw  uint16
	Chan4Raw  uint16
	Chan5Raw  uint16
	Chan6Raw  uint16
	Chan7Raw  uint16
	Chan8Raw  uint16
	Chan9Raw  uint16
	Chan10Raw uint16
	Chan11Raw uint16
	Chan12Raw uint16
	Rssi      uint8
}

func (*MessageHilRcInputsRaw) GetId() uint32 {
	return 92
}

type MessageHilActuatorControls struct {
	TimeUsec uint64
	Controls [16]float32
	Mode     uint8
	Flags    uint64
}

func (*MessageHilActuatorControls) GetId() uint32 {
	return 93
}

type MessageOpticalFlow struct {
	TimeUsec       uint64
	SensorId       uint8
	FlowX          int16
	FlowY          int16
	FlowCompMX     float32
	FlowCompMY     float32
	Quality        uint8
	GroundDistance float32
	FlowRateX      float32 `mavext:"true"`
	FlowRateY      float32 `mavext:"true"`
}

func (*MessageOpticalFlow) GetId() uint32 {
	return 100
}

type MessageGlobalVisionPositionEstimate struct {
	Usec       uint64
	X          float32
	Y          float32
	Z          float32
	Roll       float32
	Pitch      float32
	Yaw        float32
	Covariance [21]float32 `mavext:"true"`
}

func (*MessageGlobalVisionPositionEstimate) GetId() uint32 {
	return 101
}

type MessageVisionPositionEstimate struct {
	Usec       uint64
	X          float32
	Y          float32
	Z          float32
	Roll       float32
	Pitch      float32
	Yaw        float32
	Covariance [21]float32 `mavext:"true"`
}

func (*MessageVisionPositionEstimate) GetId() uint32 {
	return 102
}

type MessageVisionSpeedEstimate struct {
	Usec       uint64
	X          float32
	Y          float32
	Z          float32
	Covariance [9]float32 `mavext:"true"`
}

func (*MessageVisionSpeedEstimate) GetId() uint32 {
	return 103
}

type MessageViconPositionEstimate struct {
	Usec       uint64
	X          float32
	Y          float32
	Z          float32
	Roll       float32
	Pitch      float32
	Yaw        float32
	Covariance [21]float32 `mavext:"true"`
}

func (*MessageViconPositionEstimate) GetId() uint32 {
	return 104
}

type MessageHighresImu struct {
	TimeUsec      uint64
	Xacc          float32
	Yacc          float32
	Zacc          float32
	Xgyro         float32
	Ygyro         float32
	Zgyro         float32
	Xmag          float32
	Ymag          float32
	Zmag          float32
	AbsPressure   float32
	DiffPressure  float32
	PressureAlt   float32
	Temperature   float32
	FieldsUpdated uint16
}

func (*MessageHighresImu) GetId() uint32 {
	return 105
}

type MessageOpticalFlowRad struct {
	TimeUsec            uint64
	SensorId            uint8
	IntegrationTimeUs   uint32
	IntegratedX         float32
	IntegratedY         float32
	IntegratedXgyro     float32
	IntegratedYgyro     float32
	IntegratedZgyro     float32
	Temperature         int16
	Quality             uint8
	TimeDeltaDistanceUs uint32
	Distance            float32
}

func (*MessageOpticalFlowRad) GetId() uint32 {
	return 106
}

type MessageHilSensor struct {
	TimeUsec      uint64
	Xacc          float32
	Yacc          float32
	Zacc          float32
	Xgyro         float32
	Ygyro         float32
	Zgyro         float32
	Xmag          float32
	Ymag          float32
	Zmag          float32
	AbsPressure   float32
	DiffPressure  float32
	PressureAlt   float32
	Temperature   float32
	FieldsUpdated uint32
}

func (*MessageHilSensor) GetId() uint32 {
	return 107
}

type MessageSimState struct {
	Q1         float32
	Q2         float32
	Q3         float32
	Q4         float32
	Roll       float32
	Pitch      float32
	Yaw        float32
	Xacc       float32
	Yacc       float32
	Zacc       float32
	Xgyro      float32
	Ygyro      float32
	Zgyro      float32
	Lat        float32
	Lon        float32
	Alt        float32
	StdDevHorz float32
	StdDevVert float32
	Vn         float32
	Ve         float32
	Vd         float32
}

func (*MessageSimState) GetId() uint32 {
	return 108
}

type MessageRadioStatus struct {
	Rssi     uint8
	Remrssi  uint8
	Txbuf    uint8
	Noise    uint8
	Remnoise uint8
	Rxerrors uint16
	Fixed    uint16
}

func (*MessageRadioStatus) GetId() uint32 {
	return 109
}

type MessageFileTransferProtocol struct {
	TargetNetwork   uint8
	TargetSystem    uint8
	TargetComponent uint8
	Payload         [251]uint8
}

func (*MessageFileTransferProtocol) GetId() uint32 {
	return 110
}

type MessageTimesync struct {
	Tc1 int64
	Ts1 int64
}

func (*MessageTimesync) GetId() uint32 {
	return 111
}

type MessageCameraTrigger struct {
	TimeUsec uint64
	Seq      uint32
}

func (*MessageCameraTrigger) GetId() uint32 {
	return 112
}

type MessageHilGps struct {
	TimeUsec          uint64
	FixType           uint8
	Lat               int32
	Lon               int32
	Alt               int32
	Eph               uint16
	Epv               uint16
	Vel               uint16
	Vn                int16
	Ve                int16
	Vd                int16
	Cog               uint16
	SatellitesVisible uint8
}

func (*MessageHilGps) GetId() uint32 {
	return 113
}

type MessageHilOpticalFlow struct {
	TimeUsec            uint64
	SensorId            uint8
	IntegrationTimeUs   uint32
	IntegratedX         float32
	IntegratedY         float32
	IntegratedXgyro     float32
	IntegratedYgyro     float32
	IntegratedZgyro     float32
	Temperature         int16
	Quality             uint8
	TimeDeltaDistanceUs uint32
	Distance            float32
}

func (*MessageHilOpticalFlow) GetId() uint32 {
	return 114
}

type MessageHilStateQuaternion struct {
	TimeUsec           uint64
	AttitudeQuaternion [4]float32
	Rollspeed          float32
	Pitchspeed         float32
	Yawspeed           float32
	Lat                int32
	Lon                int32
	Alt                int32
	Vx                 int16
	Vy                 int16
	Vz                 int16
	IndAirspeed        uint16
	TrueAirspeed       uint16
	Xacc               int16
	Yacc               int16
	Zacc               int16
}

func (*MessageHilStateQuaternion) GetId() uint32 {
	return 115
}

type MessageScaledImu2 struct {
	TimeBootMs uint32
	Xacc       int16
	Yacc       int16
	Zacc       int16
	Xgyro      int16
	Ygyro      int16
	Zgyro      int16
	Xmag       int16
	Ymag       int16
	Zmag       int16
}

func (*MessageScaledImu2) GetId() uint32 {
	return 116
}

type MessageLogRequestList struct {
	TargetSystem    uint8
	TargetComponent uint8
	Start           uint16
	End             uint16
}

func (*MessageLogRequestList) GetId() uint32 {
	return 117
}

type MessageLogEntry struct {
	Id         uint16
	NumLogs    uint16
	LastLogNum uint16
	TimeUtc    uint32
	Size       uint32
}

func (*MessageLogEntry) GetId() uint32 {
	return 118
}

type MessageLogRequestData struct {
	TargetSystem    uint8
	TargetComponent uint8
	Id              uint16
	Ofs             uint32
	Count           uint32
}

func (*MessageLogRequestData) GetId() uint32 {
	return 119
}

type MessageLogData struct {
	Id    uint16
	Ofs   uint32
	Count uint8
	Data  [90]uint8
}

func (*MessageLogData) GetId() uint32 {
	return 120
}

type MessageLogErase struct {
	TargetSystem    uint8
	TargetComponent uint8
}

func (*MessageLogErase) GetId() uint32 {
	return 121
}

type MessageLogRequestEnd struct {
	TargetSystem    uint8
	TargetComponent uint8
}

func (*MessageLogRequestEnd) GetId() uint32 {
	return 122
}

type MessageGpsInjectData struct {
	TargetSystem    uint8
	TargetComponent uint8
	Len             uint8
	Data            [110]uint8
}

func (*MessageGpsInjectData) GetId() uint32 {
	return 123
}

type MessageGps2Raw struct {
	TimeUsec          uint64
	FixType           uint8
	Lat               int32
	Lon               int32
	Alt               int32
	Eph               uint16
	Epv               uint16
	Vel               uint16
	Cog               uint16
	SatellitesVisible uint8
	DgpsNumch         uint8
	DgpsAge           uint32
}

func (*MessageGps2Raw) GetId() uint32 {
	return 124
}

type MessagePowerStatus struct {
	Vcc    uint16 `mavname:"Vcc"`
	Vservo uint16 `mavname:"Vservo"`
	Flags  uint16
}

func (*MessagePowerStatus) GetId() uint32 {
	return 125
}

type MessageSerialControl struct {
	Device   uint8
	Flags    uint8
	Timeout  uint16
	Baudrate uint32
	Count    uint8
	Data     [70]uint8
}

func (*MessageSerialControl) GetId() uint32 {
	return 126
}

type MessageGpsRtk struct {
	TimeLastBaselineMs uint32
	RtkReceiverId      uint8
	Wn                 uint16
	Tow                uint32
	RtkHealth          uint8
	RtkRate            uint8
	Nsats              uint8
	BaselineCoordsType uint8
	BaselineAMm        int32
	BaselineBMm        int32
	BaselineCMm        int32
	Accuracy           uint32
	IarNumHypotheses   int32
}

func (*MessageGpsRtk) GetId() uint32 {
	return 127
}

type MessageGps2Rtk struct {
	TimeLastBaselineMs uint32
	RtkReceiverId      uint8
	Wn                 uint16
	Tow                uint32
	RtkHealth          uint8
	RtkRate            uint8
	Nsats              uint8
	BaselineCoordsType uint8
	BaselineAMm        int32
	BaselineBMm        int32
	BaselineCMm        int32
	Accuracy           uint32
	IarNumHypotheses   int32
}

func (*MessageGps2Rtk) GetId() uint32 {
	return 128
}

type MessageScaledImu3 struct {
	TimeBootMs uint32
	Xacc       int16
	Yacc       int16
	Zacc       int16
	Xgyro      int16
	Ygyro      int16
	Zgyro      int16
	Xmag       int16
	Ymag       int16
	Zmag       int16
}

func (*MessageScaledImu3) GetId() uint32 {
	return 129
}

type MessageDataTransmissionHandshake struct {
	Type       uint8
	Size       uint32
	Width      uint16
	Height     uint16
	Packets    uint16
	Payload    uint8
	JpgQuality uint8
}

func (*MessageDataTransmissionHandshake) GetId() uint32 {
	return 130
}

type MessageEncapsulatedData struct {
	Seqnr uint16
	Data  [253]uint8
}

func (*MessageEncapsulatedData) GetId() uint32 {
	return 131
}

type MessageDistanceSensor struct {
	TimeBootMs      uint32
	MinDistance     uint16
	MaxDistance     uint16
	CurrentDistance uint16
	Type            uint8
	Id              uint8
	Orientation     uint8
	Covariance      uint8
	HorizontalFov   float32    `mavext:"true"`
	VerticalFov     float32    `mavext:"true"`
	Quaternion      [4]float32 `mavext:"true"`
}

func (*MessageDistanceSensor) GetId() uint32 {
	return 132
}

type MessageTerrainRequest struct {
	Lat         int32
	Lon         int32
	GridSpacing uint16
	Mask        uint64
}

func (*MessageTerrainRequest) GetId() uint32 {
	return 133
}

type MessageTerrainData struct {
	Lat         int32
	Lon         int32
	GridSpacing uint16
	Gridbit     uint8
	Data        [16]int16
}

func (*MessageTerrainData) GetId() uint32 {
	return 134
}

type MessageTerrainCheck struct {
	Lat int32
	Lon int32
}

func (*MessageTerrainCheck) GetId() uint32 {
	return 135
}

type MessageTerrainReport struct {
	Lat           int32
	Lon           int32
	Spacing       uint16
	TerrainHeight float32
	CurrentHeight float32
	Pending       uint16
	Loaded        uint16
}

func (*MessageTerrainReport) GetId() uint32 {
	return 136
}

type MessageScaledPressure2 struct {
	TimeBootMs  uint32
	PressAbs    float32
	PressDiff   float32
	Temperature int16
}

func (*MessageScaledPressure2) GetId() uint32 {
	return 137
}

type MessageAttPosMocap struct {
	TimeUsec   uint64
	Q          [4]float32
	X          float32
	Y          float32
	Z          float32
	Covariance [21]float32 `mavext:"true"`
}

func (*MessageAttPosMocap) GetId() uint32 {
	return 138
}

type MessageSetActuatorControlTarget struct {
	TimeUsec        uint64
	GroupMlx        uint8
	TargetSystem    uint8
	TargetComponent uint8
	Controls        [8]float32
}

func (*MessageSetActuatorControlTarget) GetId() uint32 {
	return 139
}

type MessageActuatorControlTarget struct {
	TimeUsec uint64
	GroupMlx uint8
	Controls [8]float32
}

func (*MessageActuatorControlTarget) GetId() uint32 {
	return 140
}

type MessageAltitude struct {
	TimeUsec          uint64
	AltitudeMonotonic float32
	AltitudeAmsl      float32
	AltitudeLocal     float32
	AltitudeRelative  float32
	AltitudeTerrain   float32
	BottomClearance   float32
}

func (*MessageAltitude) GetId() uint32 {
	return 141
}

type MessageResourceRequest struct {
	RequestId    uint8
	UriType      uint8
	Uri          [120]uint8
	TransferType uint8
	Storage      [120]uint8
}

func (*MessageResourceRequest) GetId() uint32 {
	return 142
}

type MessageScaledPressure3 struct {
	TimeBootMs  uint32
	PressAbs    float32
	PressDiff   float32
	Temperature int16
}

func (*MessageScaledPressure3) GetId() uint32 {
	return 143
}

type MessageFollowTarget struct {
	Timestamp       uint64
	EstCapabilities uint8
	Lat             int32
	Lon             int32
	Alt             float32
	Vel             [3]float32
	Acc             [3]float32
	AttitudeQ       [4]float32
	Rates           [3]float32
	PositionCov     [3]float32
	CustomState     uint64
}

func (*MessageFollowTarget) GetId() uint32 {
	return 144
}

type MessageControlSystemState struct {
	TimeUsec    uint64
	XAcc        float32
	YAcc        float32
	ZAcc        float32
	XVel        float32
	YVel        float32
	ZVel        float32
	XPos        float32
	YPos        float32
	ZPos        float32
	Airspeed    float32
	VelVariance [3]float32
	PosVariance [3]float32
	Q           [4]float32
	RollRate    float32
	PitchRate   float32
	YawRate     float32
}

func (*MessageControlSystemState) GetId() uint32 {
	return 146
}

type MessageBatteryStatus struct {
	Id               uint8
	BatteryFunction  uint8
	Type             uint8
	Temperature      int16
	Voltages         [10]uint16
	CurrentBattery   int16
	CurrentConsumed  int32
	EnergyConsumed   int32
	BatteryRemaining int8
	TimeRemaining    int32 `mavext:"true"`
	ChargeState      uint8 `mavext:"true"`
}

func (*MessageBatteryStatus) GetId() uint32 {
	return 147
}

type MessageAutopilotVersion struct {
	Capabilities            uint64
	FlightSwVersion         uint32
	MiddlewareSwVersion     uint32
	OsSwVersion             uint32
	BoardVersion            uint32
	FlightCustomVersion     [8]uint8
	MiddlewareCustomVersion [8]uint8
	OsCustomVersion         [8]uint8
	VendorId                uint16
	ProductId               uint16
	Uid                     uint64
	Uid2                    [18]uint8 `mavext:"true"`
}

func (*MessageAutopilotVersion) GetId() uint32 {
	return 148
}

type MessageLandingTarget struct {
	TimeUsec      uint64
	TargetNum     uint8
	Frame         uint8
	AngleX        float32
	AngleY        float32
	Distance      float32
	SizeX         float32
	SizeY         float32
	X             float32    `mavext:"true"`
	Y             float32    `mavext:"true"`
	Z             float32    `mavext:"true"`
	Q             [4]float32 `mavext:"true"`
	Type          uint8      `mavext:"true"`
	PositionValid uint8      `mavext:"true"`
}

func (*MessageLandingTarget) GetId() uint32 {
	return 149
}

type MessageEstimatorStatus struct {
	TimeUsec         uint64
	Flags            uint16
	VelRatio         float32
	PosHorizRatio    float32
	PosVertRatio     float32
	MagRatio         float32
	HaglRatio        float32
	TasRatio         float32
	PosHorizAccuracy float32
	PosVertAccuracy  float32
}

func (*MessageEstimatorStatus) GetId() uint32 {
	return 230
}

type MessageWindCov struct {
	TimeUsec      uint64
	WindX         float32
	WindY         float32
	WindZ         float32
	VarHoriz      float32
	VarVert       float32
	WindAlt       float32
	HorizAccuracy float32
	VertAccuracy  float32
}

func (*MessageWindCov) GetId() uint32 {
	return 231
}

type MessageGpsInput struct {
	TimeUsec          uint64
	GpsId             uint8
	IgnoreFlags       uint16
	TimeWeekMs        uint32
	TimeWeek          uint16
	FixType           uint8
	Lat               int32
	Lon               int32
	Alt               float32
	Hdop              float32
	Vdop              float32
	Vn                float32
	Ve                float32
	Vd                float32
	SpeedAccuracy     float32
	HorizAccuracy     float32
	VertAccuracy      float32
	SatellitesVisible uint8
}

func (*MessageGpsInput) GetId() uint32 {
	return 232
}

type MessageGpsRtcmData struct {
	Flags uint8
	Len   uint8
	Data  [180]uint8
}

func (*MessageGpsRtcmData) GetId() uint32 {
	return 233
}

type MessageHighLatency struct {
	BaseMode         uint8
	CustomMode       uint32
	LandedState      uint8
	Roll             int16
	Pitch            int16
	Heading          uint16
	Throttle         int8
	HeadingSp        int16
	Latitude         int32
	Longitude        int32
	AltitudeAmsl     int16
	AltitudeSp       int16
	Airspeed         uint8
	AirspeedSp       uint8
	Groundspeed      uint8
	ClimbRate        int8
	GpsNsat          uint8
	GpsFixType       uint8
	BatteryRemaining uint8
	Temperature      int8
	TemperatureAir   int8
	Failsafe         uint8
	WpNum            uint8
	WpDistance       uint16
}

func (*MessageHighLatency) GetId() uint32 {
	return 234
}

type MessageHighLatency2 struct {
	Timestamp      uint32
	Type           uint8
	Autopilot      uint8
	CustomMode     uint16
	Latitude       int32
	Longitude      int32
	Altitude       int16
	TargetAltitude int16
	Heading        uint8
	TargetHeading  uint8
	TargetDistance uint16
	Throttle       uint8
	Airspeed       uint8
	AirspeedSp     uint8
	Groundspeed    uint8
	Windspeed      uint8
	WindHeading    uint8
	Eph            uint8
	Epv            uint8
	TemperatureAir int8
	ClimbRate      int8
	Battery        int8
	WpNum          uint16
	FailureFlags   uint16
	Custom0        int8
	Custom1        int8
	Custom2        int8
}

func (*MessageHighLatency2) GetId() uint32 {
	return 235
}

type MessageVibration struct {
	TimeUsec   uint64
	VibrationX float32
	VibrationY float32
	VibrationZ float32
	Clipping_0 uint32
	Clipping_1 uint32
	Clipping_2 uint32
}

func (*MessageVibration) GetId() uint32 {
	return 241
}

type MessageHomePosition struct {
	Latitude  int32
	Longitude int32
	Altitude  int32
	X         float32
	Y         float32
	Z         float32
	Q         [4]float32
	ApproachX float32
	ApproachY float32
	ApproachZ float32
	TimeUsec  uint64 `mavext:"true"`
}

func (*MessageHomePosition) GetId() uint32 {
	return 242
}

type MessageSetHomePosition struct {
	TargetSystem uint8
	Latitude     int32
	Longitude    int32
	Altitude     int32
	X            float32
	Y            float32
	Z            float32
	Q            [4]float32
	ApproachX    float32
	ApproachY    float32
	ApproachZ    float32
	TimeUsec     uint64 `mavext:"true"`
}

func (*MessageSetHomePosition) GetId() uint32 {
	return 243
}

type MessageMessageInterval struct {
	MessageId  uint16
	IntervalUs int32
}

func (*MessageMessageInterval) GetId() uint32 {
	return 244
}

type MessageExtendedSysState struct {
	VtolState   uint8
	LandedState uint8
}

func (*MessageExtendedSysState) GetId() uint32 {
	return 245
}

type MessageAdsbVehicle struct {
	IcaoAddress  uint32 `mavname:"ICAO_address"`
	Lat          int32
	Lon          int32
	AltitudeType uint8
	Altitude     int32
	Heading      uint16
	HorVelocity  uint16
	VerVelocity  int16
	Callsign     string `mavlen:"9"`
	EmitterType  uint8
	Tslc         uint8
	Flags        uint16
	Squawk       uint16
}

func (*MessageAdsbVehicle) GetId() uint32 {
	return 246
}

type MessageCollision struct {
	Src                    uint8
	Id                     uint32
	Action                 uint8
	ThreatLevel            uint8
	TimeToMinimumDelta     float32
	AltitudeMinimumDelta   float32
	HorizontalMinimumDelta float32
}

func (*MessageCollision) GetId() uint32 {
	return 247
}

type MessageV2Extension struct {
	TargetNetwork   uint8
	TargetSystem    uint8
	TargetComponent uint8
	MessageType     uint16
	Payload         [249]uint8
}

func (*MessageV2Extension) GetId() uint32 {
	return 248
}

type MessageMemoryVect struct {
	Address uint16
	Ver     uint8
	Type    uint8
	Value   [32]int8
}

func (*MessageMemoryVect) GetId() uint32 {
	return 249
}

type MessageDebugVect struct {
	Name     string `mavlen:"10"`
	TimeUsec uint64
	X        float32
	Y        float32
	Z        float32
}

func (*MessageDebugVect) GetId() uint32 {
	return 250
}

type MessageNamedValueFloat struct {
	TimeBootMs uint32
	Name       string `mavlen:"10"`
	Value      float32
}

func (*MessageNamedValueFloat) GetId() uint32 {
	return 251
}

type MessageNamedValueInt struct {
	TimeBootMs uint32
	Name       string `mavlen:"10"`
	Value      int32
}

func (*MessageNamedValueInt) GetId() uint32 {
	return 252
}

type MessageStatustext struct {
	Severity uint8
	Text     string `mavlen:"50"`
}

func (*MessageStatustext) GetId() uint32 {
	return 253
}

type MessageDebug struct {
	TimeBootMs uint32
	Ind        uint8
	Value      float32
}

func (*MessageDebug) GetId() uint32 {
	return 254
}

type MessageSetupSigning struct {
	TargetSystem     uint8
	TargetComponent  uint8
	SecretKey        [32]uint8
	InitialTimestamp uint64
}

func (*MessageSetupSigning) GetId() uint32 {
	return 256
}

type MessageButtonChange struct {
	TimeBootMs   uint32
	LastChangeMs uint32
	State        uint8
}

func (*MessageButtonChange) GetId() uint32 {
	return 257
}

type MessagePlayTune struct {
	TargetSystem    uint8
	TargetComponent uint8
	Tune            string `mavlen:"30"`
	Tune2           string `mavext:"true" mavlen:"200"`
}

func (*MessagePlayTune) GetId() uint32 {
	return 258
}

type MessageCameraInformation struct {
	TimeBootMs           uint32
	VendorName           [32]uint8
	ModelName            [32]uint8
	FirmwareVersion      uint32
	FocalLength          float32
	SensorSizeH          float32
	SensorSizeV          float32
	ResolutionH          uint16
	ResolutionV          uint16
	LensId               uint8
	Flags                uint32
	CamDefinitionVersion uint16
	CamDefinitionUri     string `mavlen:"140"`
}

func (*MessageCameraInformation) GetId() uint32 {
	return 259
}

type MessageCameraSettings struct {
	TimeBootMs uint32
	ModeId     uint8
	Zoomlevel  float32 `mavext:"true" mavname:"zoomLevel"`
	Focuslevel float32 `mavext:"true" mavname:"focusLevel"`
}

func (*MessageCameraSettings) GetId() uint32 {
	return 260
}

type MessageStorageInformation struct {
	TimeBootMs        uint32
	StorageId         uint8
	StorageCount      uint8
	Status            uint8
	TotalCapacity     float32
	UsedCapacity      float32
	AvailableCapacity float32
	ReadSpeed         float32
	WriteSpeed        float32
}

func (*MessageStorageInformation) GetId() uint32 {
	return 261
}

type MessageCameraCaptureStatus struct {
	TimeBootMs        uint32
	ImageStatus       uint8
	VideoStatus       uint8
	ImageInterval     float32
	RecordingTimeMs   uint32
	AvailableCapacity float32
}

func (*MessageCameraCaptureStatus) GetId() uint32 {
	return 262
}

type MessageCameraImageCaptured struct {
	TimeBootMs    uint32
	TimeUtc       uint64
	CameraId      uint8
	Lat           int32
	Lon           int32
	Alt           int32
	RelativeAlt   int32
	Q             [4]float32
	ImageIndex    int32
	CaptureResult int8
	FileUrl       string `mavlen:"205"`
}

func (*MessageCameraImageCaptured) GetId() uint32 {
	return 263
}

type MessageFlightInformation struct {
	TimeBootMs     uint32
	ArmingTimeUtc  uint64
	TakeoffTimeUtc uint64
	FlightUuid     uint64
}

func (*MessageFlightInformation) GetId() uint32 {
	return 264
}

type MessageMountOrientation struct {
	TimeBootMs  uint32
	Roll        float32
	Pitch       float32
	Yaw         float32
	YawAbsolute float32 `mavext:"true"`
}

func (*MessageMountOrientation) GetId() uint32 {
	return 265
}

type MessageLoggingData struct {
	TargetSystem       uint8
	TargetComponent    uint8
	Sequence           uint16
	Length             uint8
	FirstMessageOffset uint8
	Data               [249]uint8
}

func (*MessageLoggingData) GetId() uint32 {
	return 266
}

type MessageLoggingDataAcked struct {
	TargetSystem       uint8
	TargetComponent    uint8
	Sequence           uint16
	Length             uint8
	FirstMessageOffset uint8
	Data               [249]uint8
}

func (*MessageLoggingDataAcked) GetId() uint32 {
	return 267
}

type MessageLoggingAck struct {
	TargetSystem    uint8
	TargetComponent uint8
	Sequence        uint16
}

func (*MessageLoggingAck) GetId() uint32 {
	return 268
}

type MessageVideoStreamInformation struct {
	StreamId    uint8
	Count       uint8
	Type        uint8
	Flags       uint16
	Framerate   float32
	ResolutionH uint16
	ResolutionV uint16
	Bitrate     uint32
	Rotation    uint16
	Hfov        uint16
	Name        string `mavlen:"32"`
	Uri         string `mavlen:"160"`
}

func (*MessageVideoStreamInformation) GetId() uint32 {
	return 269
}

type MessageVideoStreamStatus struct {
	StreamId    uint8
	Flags       uint16
	Framerate   float32
	ResolutionH uint16
	ResolutionV uint16
	Bitrate     uint32
	Rotation    uint16
	Hfov        uint16
}

func (*MessageVideoStreamStatus) GetId() uint32 {
	return 270
}

type MessageWifiConfigAp struct {
	Ssid     string `mavlen:"32"`
	Password string `mavlen:"64"`
}

func (*MessageWifiConfigAp) GetId() uint32 {
	return 299
}

type MessageProtocolVersion struct {
	Version            uint16
	MinVersion         uint16
	MaxVersion         uint16
	SpecVersionHash    [8]uint8
	LibraryVersionHash [8]uint8
}

func (*MessageProtocolVersion) GetId() uint32 {
	return 300
}

type MessageUavcanNodeStatus struct {
	TimeUsec                 uint64
	UptimeSec                uint32
	Health                   uint8
	Mode                     uint8
	SubMode                  uint8
	VendorSpecificStatusCode uint16
}

func (*MessageUavcanNodeStatus) GetId() uint32 {
	return 310
}

type MessageUavcanNodeInfo struct {
	TimeUsec       uint64
	UptimeSec      uint32
	Name           string `mavlen:"80"`
	HwVersionMajor uint8
	HwVersionMinor uint8
	HwUniqueId     [16]uint8
	SwVersionMajor uint8
	SwVersionMinor uint8
	SwVcsCommit    uint32
}

func (*MessageUavcanNodeInfo) GetId() uint32 {
	return 311
}

type MessageParamExtRequestRead struct {
	TargetSystem    uint8
	TargetComponent uint8
	ParamId         string `mavlen:"16"`
	ParamIndex      int16
}

func (*MessageParamExtRequestRead) GetId() uint32 {
	return 320
}

type MessageParamExtRequestList struct {
	TargetSystem    uint8
	TargetComponent uint8
}

func (*MessageParamExtRequestList) GetId() uint32 {
	return 321
}

type MessageParamExtValue struct {
	ParamId    string `mavlen:"16"`
	ParamValue string `mavlen:"128"`
	ParamType  uint8
	ParamCount uint16
	ParamIndex uint16
}

func (*MessageParamExtValue) GetId() uint32 {
	return 322
}

type MessageParamExtSet struct {
	TargetSystem    uint8
	TargetComponent uint8
	ParamId         string `mavlen:"16"`
	ParamValue      string `mavlen:"128"`
	ParamType       uint8
}

func (*MessageParamExtSet) GetId() uint32 {
	return 323
}

type MessageParamExtAck struct {
	ParamId     string `mavlen:"16"`
	ParamValue  string `mavlen:"128"`
	ParamType   uint8
	ParamResult uint8
}

func (*MessageParamExtAck) GetId() uint32 {
	return 324
}

type MessageObstacleDistance struct {
	TimeUsec    uint64
	SensorType  uint8
	Distances   [72]uint16
	Increment   uint8
	MinDistance uint16
	MaxDistance uint16
}

func (*MessageObstacleDistance) GetId() uint32 {
	return 330
}

type MessageOdometry struct {
	TimeUsec           uint64
	FrameId            uint8
	ChildFrameId       uint8
	X                  float32
	Y                  float32
	Z                  float32
	Q                  [4]float32
	Vx                 float32
	Vy                 float32
	Vz                 float32
	Rollspeed          float32
	Pitchspeed         float32
	Yawspeed           float32
	PoseCovariance     [21]float32
	VelocityCovariance [21]float32
}

func (*MessageOdometry) GetId() uint32 {
	return 331
}

type MessageTrajectoryRepresentationWaypoints struct {
	TimeUsec    uint64
	ValidPoints uint8
	PosX        [5]float32
	PosY        [5]float32
	PosZ        [5]float32
	VelX        [5]float32
	VelY        [5]float32
	VelZ        [5]float32
	AccX        [5]float32
	AccY        [5]float32
	AccZ        [5]float32
	PosYaw      [5]float32
	VelYaw      [5]float32
}

func (*MessageTrajectoryRepresentationWaypoints) GetId() uint32 {
	return 332
}

type MessageTrajectoryRepresentationBezier struct {
	TimeUsec    uint64
	ValidPoints uint8
	PosX        [5]float32
	PosY        [5]float32
	PosZ        [5]float32
	Delta       [5]float32
	PosYaw      [5]float32
}

func (*MessageTrajectoryRepresentationBezier) GetId() uint32 {
	return 333
}

type MessageCellularStatus struct {
	Status  uint16
	Type    uint8
	Quality uint8
	Mcc     uint16
	Mnc     uint16
	Lac     uint16
	Cid     uint32
}

func (*MessageCellularStatus) GetId() uint32 {
	return 334
}

type MessageUtmGlobalPosition struct {
	Time        uint64
	UasId       [18]uint8
	Lat         int32
	Lon         int32
	Alt         int32
	RelativeAlt int32
	Vx          int16
	Vy          int16
	Vz          int16
	HAcc        uint16
	VAcc        uint16
	VelAcc      uint16
	NextLat     int32
	NextLon     int32
	NextAlt     int32
	UpdateRate  uint16
	FlightState uint8
	Flags       uint8
}

func (*MessageUtmGlobalPosition) GetId() uint32 {
	return 340
}

type MessageDebugFloatArray struct {
	TimeUsec uint64
	Name     string `mavlen:"10"`
	ArrayId  uint16
	Data     [58]float32 `mavext:"true"`
}

func (*MessageDebugFloatArray) GetId() uint32 {
	return 350
}

type MessageOrbitExecutionStatus struct {
	TimeUsec uint64
	Radius   float32
	Frame    uint8
	X        int32
	Y        int32
	Z        float32
}

func (*MessageOrbitExecutionStatus) GetId() uint32 {
	return 360
}

type MessageStatustextLong struct {
	Severity uint8
	Text     string `mavlen:"254"`
}

func (*MessageStatustextLong) GetId() uint32 {
	return 365
}

type MessageSmartBatteryInfo struct {
	Id                        uint8
	CapacityFullSpecification int32
	CapacityFull              int32
	CycleCount                uint16
	SerialNumber              int32
	DeviceName                string `mavlen:"50"`
	Weight                    uint16
	DischargeMinimumVoltage   uint16
	ChargingMinimumVoltage    uint16
	RestingMinimumVoltage     uint16
}

func (*MessageSmartBatteryInfo) GetId() uint32 {
	return 370
}

type MessageSmartBatteryStatus struct {
	Id                uint16
	CapacityRemaining int16
	Current           int16
	Temperature       int16
	FaultBitmask      int32
	TimeRemaining     int32
	CellOffset        uint16
	Voltages          [16]uint16
}

func (*MessageSmartBatteryStatus) GetId() uint32 {
	return 371
}

type MessageWheelDistance struct {
	TimeUsec uint64
	Count    uint8
	Distance [16]float64
}

func (*MessageWheelDistance) GetId() uint32 {
	return 9000
}

// ualberta.xml

type MessageNavFilterBias struct {
	Usec    uint64
	Accel_0 float32
	Accel_1 float32
	Accel_2 float32
	Gyro_0  float32
	Gyro_1  float32
	Gyro_2  float32
}

func (*MessageNavFilterBias) GetId() uint32 {
	return 220
}

type MessageRadioCalibration struct {
	Aileron  [3]uint16
	Elevator [3]uint16
	Rudder   [3]uint16
	Gyro     [2]uint16
	Pitch    [5]uint16
	Throttle [5]uint16
}

func (*MessageRadioCalibration) GetId() uint32 {
	return 221
}

type MessageUalbertaSysStatus struct {
	Mode    uint8
	NavMode uint8
	Pilot   uint8
}

func (*MessageUalbertaSysStatus) GetId() uint32 {
	return 222
}

// dialect content is not exposed directly such that it is displayed nicely on godoc.
var dialect = gomavlib.MustDialect([]gomavlib.Message{
	// common.xml
	&MessageHeartbeat{},
	&MessageSysStatus{},
	&MessageSystemTime{},
	&MessagePing{},
	&MessageChangeOperatorControl{},
	&MessageChangeOperatorControlAck{},
	&MessageAuthKey{},
	&MessageSetMode{},
	&MessageParamRequestRead{},
	&MessageParamRequestList{},
	&MessageParamValue{},
	&MessageParamSet{},
	&MessageGpsRawInt{},
	&MessageGpsStatus{},
	&MessageScaledImu{},
	&MessageRawImu{},
	&MessageRawPressure{},
	&MessageScaledPressure{},
	&MessageAttitude{},
	&MessageAttitudeQuaternion{},
	&MessageLocalPositionNed{},
	&MessageGlobalPositionInt{},
	&MessageRcChannelsScaled{},
	&MessageRcChannelsRaw{},
	&MessageServoOutputRaw{},
	&MessageMissionRequestPartialList{},
	&MessageMissionWritePartialList{},
	&MessageMissionItem{},
	&MessageMissionRequest{},
	&MessageMissionSetCurrent{},
	&MessageMissionCurrent{},
	&MessageMissionRequestList{},
	&MessageMissionCount{},
	&MessageMissionClearAll{},
	&MessageMissionItemReached{},
	&MessageMissionAck{},
	&MessageSetGpsGlobalOrigin{},
	&MessageGpsGlobalOrigin{},
	&MessageParamMapRc{},
	&MessageMissionRequestInt{},
	&MessageSafetySetAllowedArea{},
	&MessageSafetyAllowedArea{},
	&MessageAttitudeQuaternionCov{},
	&MessageNavControllerOutput{},
	&MessageGlobalPositionIntCov{},
	&MessageLocalPositionNedCov{},
	&MessageRcChannels{},
	&MessageRequestDataStream{},
	&MessageDataStream{},
	&MessageManualControl{},
	&MessageRcChannelsOverride{},
	&MessageMissionItemInt{},
	&MessageVfrHud{},
	&MessageCommandInt{},
	&MessageCommandLong{},
	&MessageCommandAck{},
	&MessageManualSetpoint{},
	&MessageSetAttitudeTarget{},
	&MessageAttitudeTarget{},
	&MessageSetPositionTargetLocalNed{},
	&MessagePositionTargetLocalNed{},
	&MessageSetPositionTargetGlobalInt{},
	&MessagePositionTargetGlobalInt{},
	&MessageLocalPositionNedSystemGlobalOffset{},
	&MessageHilState{},
	&MessageHilControls{},
	&MessageHilRcInputsRaw{},
	&MessageHilActuatorControls{},
	&MessageOpticalFlow{},
	&MessageGlobalVisionPositionEstimate{},
	&MessageVisionPositionEstimate{},
	&MessageVisionSpeedEstimate{},
	&MessageViconPositionEstimate{},
	&MessageHighresImu{},
	&MessageOpticalFlowRad{},
	&MessageHilSensor{},
	&MessageSimState{},
	&MessageRadioStatus{},
	&MessageFileTransferProtocol{},
	&MessageTimesync{},
	&MessageCameraTrigger{},
	&MessageHilGps{},
	&MessageHilOpticalFlow{},
	&MessageHilStateQuaternion{},
	&MessageScaledImu2{},
	&MessageLogRequestList{},
	&MessageLogEntry{},
	&MessageLogRequestData{},
	&MessageLogData{},
	&MessageLogErase{},
	&MessageLogRequestEnd{},
	&MessageGpsInjectData{},
	&MessageGps2Raw{},
	&MessagePowerStatus{},
	&MessageSerialControl{},
	&MessageGpsRtk{},
	&MessageGps2Rtk{},
	&MessageScaledImu3{},
	&MessageDataTransmissionHandshake{},
	&MessageEncapsulatedData{},
	&MessageDistanceSensor{},
	&MessageTerrainRequest{},
	&MessageTerrainData{},
	&MessageTerrainCheck{},
	&MessageTerrainReport{},
	&MessageScaledPressure2{},
	&MessageAttPosMocap{},
	&MessageSetActuatorControlTarget{},
	&MessageActuatorControlTarget{},
	&MessageAltitude{},
	&MessageResourceRequest{},
	&MessageScaledPressure3{},
	&MessageFollowTarget{},
	&MessageControlSystemState{},
	&MessageBatteryStatus{},
	&MessageAutopilotVersion{},
	&MessageLandingTarget{},
	&MessageEstimatorStatus{},
	&MessageWindCov{},
	&MessageGpsInput{},
	&MessageGpsRtcmData{},
	&MessageHighLatency{},
	&MessageHighLatency2{},
	&MessageVibration{},
	&MessageHomePosition{},
	&MessageSetHomePosition{},
	&MessageMessageInterval{},
	&MessageExtendedSysState{},
	&MessageAdsbVehicle{},
	&MessageCollision{},
	&MessageV2Extension{},
	&MessageMemoryVect{},
	&MessageDebugVect{},
	&MessageNamedValueFloat{},
	&MessageNamedValueInt{},
	&MessageStatustext{},
	&MessageDebug{},
	&MessageSetupSigning{},
	&MessageButtonChange{},
	&MessagePlayTune{},
	&MessageCameraInformation{},
	&MessageCameraSettings{},
	&MessageStorageInformation{},
	&MessageCameraCaptureStatus{},
	&MessageCameraImageCaptured{},
	&MessageFlightInformation{},
	&MessageMountOrientation{},
	&MessageLoggingData{},
	&MessageLoggingDataAcked{},
	&MessageLoggingAck{},
	&MessageVideoStreamInformation{},
	&MessageVideoStreamStatus{},
	&MessageWifiConfigAp{},
	&MessageProtocolVersion{},
	&MessageUavcanNodeStatus{},
	&MessageUavcanNodeInfo{},
	&MessageParamExtRequestRead{},
	&MessageParamExtRequestList{},
	&MessageParamExtValue{},
	&MessageParamExtSet{},
	&MessageParamExtAck{},
	&MessageObstacleDistance{},
	&MessageOdometry{},
	&MessageTrajectoryRepresentationWaypoints{},
	&MessageTrajectoryRepresentationBezier{},
	&MessageCellularStatus{},
	&MessageUtmGlobalPosition{},
	&MessageDebugFloatArray{},
	&MessageOrbitExecutionStatus{},
	&MessageStatustextLong{},
	&MessageSmartBatteryInfo{},
	&MessageSmartBatteryStatus{},
	&MessageWheelDistance{},
	// ualberta.xml
	&MessageNavFilterBias{},
	&MessageRadioCalibration{},
	&MessageUalbertaSysStatus{},
})

var Dialect = dialect

type ADSB_ALTITUDE_TYPE int

const (
	ADSB_ALTITUDE_TYPE_PRESSURE_QNH ADSB_ALTITUDE_TYPE = 0
	ADSB_ALTITUDE_TYPE_GEOMETRIC    ADSB_ALTITUDE_TYPE = 1
)

type ADSB_EMITTER_TYPE int

const (
	ADSB_EMITTER_TYPE_NO_INFO           ADSB_EMITTER_TYPE = 0
	ADSB_EMITTER_TYPE_LIGHT             ADSB_EMITTER_TYPE = 1
	ADSB_EMITTER_TYPE_SMALL             ADSB_EMITTER_TYPE = 2
	ADSB_EMITTER_TYPE_LARGE             ADSB_EMITTER_TYPE = 3
	ADSB_EMITTER_TYPE_HIGH_VORTEX_LARGE ADSB_EMITTER_TYPE = 4
	ADSB_EMITTER_TYPE_HEAVY             ADSB_EMITTER_TYPE = 5
	ADSB_EMITTER_TYPE_HIGHLY_MANUV      ADSB_EMITTER_TYPE = 6
	ADSB_EMITTER_TYPE_ROTOCRAFT         ADSB_EMITTER_TYPE = 7
	ADSB_EMITTER_TYPE_UNASSIGNED        ADSB_EMITTER_TYPE = 8
	ADSB_EMITTER_TYPE_GLIDER            ADSB_EMITTER_TYPE = 9
	ADSB_EMITTER_TYPE_LIGHTER_AIR       ADSB_EMITTER_TYPE = 10
	ADSB_EMITTER_TYPE_PARACHUTE         ADSB_EMITTER_TYPE = 11
	ADSB_EMITTER_TYPE_ULTRA_LIGHT       ADSB_EMITTER_TYPE = 12
	ADSB_EMITTER_TYPE_UNASSIGNED2       ADSB_EMITTER_TYPE = 13
	ADSB_EMITTER_TYPE_UAV               ADSB_EMITTER_TYPE = 14
	ADSB_EMITTER_TYPE_SPACE             ADSB_EMITTER_TYPE = 15
	ADSB_EMITTER_TYPE_UNASSGINED3       ADSB_EMITTER_TYPE = 16
	ADSB_EMITTER_TYPE_EMERGENCY_SURFACE ADSB_EMITTER_TYPE = 17
	ADSB_EMITTER_TYPE_SERVICE_SURFACE   ADSB_EMITTER_TYPE = 18
	ADSB_EMITTER_TYPE_POINT_OBSTACLE    ADSB_EMITTER_TYPE = 19
)

type ADSB_FLAGS int

const (
	ADSB_FLAGS_VALID_COORDS   ADSB_FLAGS = 1
	ADSB_FLAGS_VALID_ALTITUDE ADSB_FLAGS = 2
	ADSB_FLAGS_VALID_HEADING  ADSB_FLAGS = 4
	ADSB_FLAGS_VALID_VELOCITY ADSB_FLAGS = 8
	ADSB_FLAGS_VALID_CALLSIGN ADSB_FLAGS = 16
	ADSB_FLAGS_VALID_SQUAWK   ADSB_FLAGS = 32
	ADSB_FLAGS_SIMULATED      ADSB_FLAGS = 64
)

type CAMERA_CAP_FLAGS int

const (
	CAMERA_CAP_FLAGS_CAPTURE_VIDEO                   CAMERA_CAP_FLAGS = 1
	CAMERA_CAP_FLAGS_CAPTURE_IMAGE                   CAMERA_CAP_FLAGS = 2
	CAMERA_CAP_FLAGS_HAS_MODES                       CAMERA_CAP_FLAGS = 4
	CAMERA_CAP_FLAGS_CAN_CAPTURE_IMAGE_IN_VIDEO_MODE CAMERA_CAP_FLAGS = 8
	CAMERA_CAP_FLAGS_CAN_CAPTURE_VIDEO_IN_IMAGE_MODE CAMERA_CAP_FLAGS = 16
	CAMERA_CAP_FLAGS_HAS_IMAGE_SURVEY_MODE           CAMERA_CAP_FLAGS = 32
	CAMERA_CAP_FLAGS_HAS_BASIC_ZOOM                  CAMERA_CAP_FLAGS = 64
	CAMERA_CAP_FLAGS_HAS_BASIC_FOCUS                 CAMERA_CAP_FLAGS = 128
	CAMERA_CAP_FLAGS_HAS_VIDEO_STREAM                CAMERA_CAP_FLAGS = 256
)

type CAMERA_MODE int

const (
	CAMERA_MODE_IMAGE        CAMERA_MODE = 0
	CAMERA_MODE_VIDEO        CAMERA_MODE = 1
	CAMERA_MODE_IMAGE_SURVEY CAMERA_MODE = 2
)

type CAMERA_ZOOM_TYPE int

const (
	ZOOM_TYPE_STEP       CAMERA_ZOOM_TYPE = 0
	ZOOM_TYPE_CONTINUOUS CAMERA_ZOOM_TYPE = 1
	ZOOM_TYPE_RANGE      CAMERA_ZOOM_TYPE = 2
)

type CELLULAR_NETWORK_RADIO_TYPE int

const (
	CELLULAR_NETWORK_RADIO_TYPE_NONE  CELLULAR_NETWORK_RADIO_TYPE = 0
	CELLULAR_NETWORK_RADIO_TYPE_GSM   CELLULAR_NETWORK_RADIO_TYPE = 1
	CELLULAR_NETWORK_RADIO_TYPE_CDMA  CELLULAR_NETWORK_RADIO_TYPE = 2
	CELLULAR_NETWORK_RADIO_TYPE_WCDMA CELLULAR_NETWORK_RADIO_TYPE = 3
	CELLULAR_NETWORK_RADIO_TYPE_LTE   CELLULAR_NETWORK_RADIO_TYPE = 4
)

type CELLULAR_NETWORK_STATUS_FLAG int

const (
	CELLULAR_NETWORK_STATUS_FLAG_ROAMING CELLULAR_NETWORK_STATUS_FLAG = 1
)

type ESTIMATOR_STATUS_FLAGS int

const (
	ESTIMATOR_ATTITUDE           ESTIMATOR_STATUS_FLAGS = 1
	ESTIMATOR_VELOCITY_HORIZ     ESTIMATOR_STATUS_FLAGS = 2
	ESTIMATOR_VELOCITY_VERT      ESTIMATOR_STATUS_FLAGS = 4
	ESTIMATOR_POS_HORIZ_REL      ESTIMATOR_STATUS_FLAGS = 8
	ESTIMATOR_POS_HORIZ_ABS      ESTIMATOR_STATUS_FLAGS = 16
	ESTIMATOR_POS_VERT_ABS       ESTIMATOR_STATUS_FLAGS = 32
	ESTIMATOR_POS_VERT_AGL       ESTIMATOR_STATUS_FLAGS = 64
	ESTIMATOR_CONST_POS_MODE     ESTIMATOR_STATUS_FLAGS = 128
	ESTIMATOR_PRED_POS_HORIZ_REL ESTIMATOR_STATUS_FLAGS = 256
	ESTIMATOR_PRED_POS_HORIZ_ABS ESTIMATOR_STATUS_FLAGS = 512
	ESTIMATOR_GPS_GLITCH         ESTIMATOR_STATUS_FLAGS = 1024
	ESTIMATOR_ACCEL_ERROR        ESTIMATOR_STATUS_FLAGS = 2048
)

type FENCE_ACTION int

const (
	FENCE_ACTION_NONE            FENCE_ACTION = 0
	FENCE_ACTION_GUIDED          FENCE_ACTION = 1
	FENCE_ACTION_REPORT          FENCE_ACTION = 2
	FENCE_ACTION_GUIDED_THR_PASS FENCE_ACTION = 3
	FENCE_ACTION_RTL             FENCE_ACTION = 4
)

type FENCE_BREACH int

const (
	FENCE_BREACH_NONE     FENCE_BREACH = 0
	FENCE_BREACH_MINALT   FENCE_BREACH = 1
	FENCE_BREACH_MAXALT   FENCE_BREACH = 2
	FENCE_BREACH_BOUNDARY FENCE_BREACH = 3
)

type FIRMWARE_VERSION_TYPE int

const (
	FIRMWARE_VERSION_TYPE_DEV      FIRMWARE_VERSION_TYPE = 0
	FIRMWARE_VERSION_TYPE_ALPHA    FIRMWARE_VERSION_TYPE = 64
	FIRMWARE_VERSION_TYPE_BETA     FIRMWARE_VERSION_TYPE = 128
	FIRMWARE_VERSION_TYPE_RC       FIRMWARE_VERSION_TYPE = 192
	FIRMWARE_VERSION_TYPE_OFFICIAL FIRMWARE_VERSION_TYPE = 255
)

type GPS_FIX_TYPE int

const (
	GPS_FIX_TYPE_NO_GPS    GPS_FIX_TYPE = 0
	GPS_FIX_TYPE_NO_FIX    GPS_FIX_TYPE = 1
	GPS_FIX_TYPE_2D_FIX    GPS_FIX_TYPE = 2
	GPS_FIX_TYPE_3D_FIX    GPS_FIX_TYPE = 3
	GPS_FIX_TYPE_DGPS      GPS_FIX_TYPE = 4
	GPS_FIX_TYPE_RTK_FLOAT GPS_FIX_TYPE = 5
	GPS_FIX_TYPE_RTK_FIXED GPS_FIX_TYPE = 6
	GPS_FIX_TYPE_STATIC    GPS_FIX_TYPE = 7
	GPS_FIX_TYPE_PPP       GPS_FIX_TYPE = 8
)

type GPS_INPUT_IGNORE_FLAGS int

const (
	GPS_INPUT_IGNORE_FLAG_ALT                 GPS_INPUT_IGNORE_FLAGS = 1
	GPS_INPUT_IGNORE_FLAG_HDOP                GPS_INPUT_IGNORE_FLAGS = 2
	GPS_INPUT_IGNORE_FLAG_VDOP                GPS_INPUT_IGNORE_FLAGS = 4
	GPS_INPUT_IGNORE_FLAG_VEL_HORIZ           GPS_INPUT_IGNORE_FLAGS = 8
	GPS_INPUT_IGNORE_FLAG_VEL_VERT            GPS_INPUT_IGNORE_FLAGS = 16
	GPS_INPUT_IGNORE_FLAG_SPEED_ACCURACY      GPS_INPUT_IGNORE_FLAGS = 32
	GPS_INPUT_IGNORE_FLAG_HORIZONTAL_ACCURACY GPS_INPUT_IGNORE_FLAGS = 64
	GPS_INPUT_IGNORE_FLAG_VERTICAL_ACCURACY   GPS_INPUT_IGNORE_FLAGS = 128
)

type HL_FAILURE_FLAG int

const (
	HL_FAILURE_FLAG_GPS                   HL_FAILURE_FLAG = 1
	HL_FAILURE_FLAG_DIFFERENTIAL_PRESSURE HL_FAILURE_FLAG = 2
	HL_FAILURE_FLAG_ABSOLUTE_PRESSURE     HL_FAILURE_FLAG = 4
	HL_FAILURE_FLAG_3D_ACCEL              HL_FAILURE_FLAG = 8
	HL_FAILURE_FLAG_3D_GYRO               HL_FAILURE_FLAG = 16
	HL_FAILURE_FLAG_3D_MAG                HL_FAILURE_FLAG = 32
	HL_FAILURE_FLAG_TERRAIN               HL_FAILURE_FLAG = 64
	HL_FAILURE_FLAG_BATTERY               HL_FAILURE_FLAG = 128
	HL_FAILURE_FLAG_RC_RECEIVER           HL_FAILURE_FLAG = 256
	HL_FAILURE_FLAG_OFFBOARD_LINK         HL_FAILURE_FLAG = 512
	HL_FAILURE_FLAG_ENGINE                HL_FAILURE_FLAG = 1024
	HL_FAILURE_FLAG_GEOFENCE              HL_FAILURE_FLAG = 2048
	HL_FAILURE_FLAG_ESTIMATOR             HL_FAILURE_FLAG = 4096
	HL_FAILURE_FLAG_MISSION               HL_FAILURE_FLAG = 8192
)

type LANDING_TARGET_TYPE int

const (
	LANDING_TARGET_TYPE_LIGHT_BEACON    LANDING_TARGET_TYPE = 0
	LANDING_TARGET_TYPE_RADIO_BEACON    LANDING_TARGET_TYPE = 1
	LANDING_TARGET_TYPE_VISION_FIDUCIAL LANDING_TARGET_TYPE = 2
	LANDING_TARGET_TYPE_VISION_OTHER    LANDING_TARGET_TYPE = 3
)

type MAVLINK_DATA_STREAM_TYPE int

const (
	MAVLINK_DATA_STREAM_IMG_JPEG   MAVLINK_DATA_STREAM_TYPE = 0
	MAVLINK_DATA_STREAM_IMG_BMP    MAVLINK_DATA_STREAM_TYPE = 1
	MAVLINK_DATA_STREAM_IMG_RAW8U  MAVLINK_DATA_STREAM_TYPE = 2
	MAVLINK_DATA_STREAM_IMG_RAW32U MAVLINK_DATA_STREAM_TYPE = 3
	MAVLINK_DATA_STREAM_IMG_PGM    MAVLINK_DATA_STREAM_TYPE = 4
	MAVLINK_DATA_STREAM_IMG_PNG    MAVLINK_DATA_STREAM_TYPE = 5
)

type MAV_ARM_AUTH_DENIED_REASON int

const (
	MAV_ARM_AUTH_DENIED_REASON_GENERIC          MAV_ARM_AUTH_DENIED_REASON = 0
	MAV_ARM_AUTH_DENIED_REASON_NONE             MAV_ARM_AUTH_DENIED_REASON = 1
	MAV_ARM_AUTH_DENIED_REASON_INVALID_WAYPOINT MAV_ARM_AUTH_DENIED_REASON = 2
	MAV_ARM_AUTH_DENIED_REASON_TIMEOUT          MAV_ARM_AUTH_DENIED_REASON = 3
	MAV_ARM_AUTH_DENIED_REASON_AIRSPACE_IN_USE  MAV_ARM_AUTH_DENIED_REASON = 4
	MAV_ARM_AUTH_DENIED_REASON_BAD_WEATHER      MAV_ARM_AUTH_DENIED_REASON = 5
)

type MAV_AUTOPILOT int

const (
	MAV_AUTOPILOT_GENERIC                                      MAV_AUTOPILOT = 0
	MAV_AUTOPILOT_RESERVED                                     MAV_AUTOPILOT = 1
	MAV_AUTOPILOT_SLUGS                                        MAV_AUTOPILOT = 2
	MAV_AUTOPILOT_ARDUPILOTMEGA                                MAV_AUTOPILOT = 3
	MAV_AUTOPILOT_OPENPILOT                                    MAV_AUTOPILOT = 4
	MAV_AUTOPILOT_GENERIC_WAYPOINTS_ONLY                       MAV_AUTOPILOT = 5
	MAV_AUTOPILOT_GENERIC_WAYPOINTS_AND_SIMPLE_NAVIGATION_ONLY MAV_AUTOPILOT = 6
	MAV_AUTOPILOT_GENERIC_MISSION_FULL                         MAV_AUTOPILOT = 7
	MAV_AUTOPILOT_INVALID                                      MAV_AUTOPILOT = 8
	MAV_AUTOPILOT_PPZ                                          MAV_AUTOPILOT = 9
	MAV_AUTOPILOT_UDB                                          MAV_AUTOPILOT = 10
	MAV_AUTOPILOT_FP                                           MAV_AUTOPILOT = 11
	MAV_AUTOPILOT_PX4                                          MAV_AUTOPILOT = 12
	MAV_AUTOPILOT_SMACCMPILOT                                  MAV_AUTOPILOT = 13
	MAV_AUTOPILOT_AUTOQUAD                                     MAV_AUTOPILOT = 14
	MAV_AUTOPILOT_ARMAZILA                                     MAV_AUTOPILOT = 15
	MAV_AUTOPILOT_AEROB                                        MAV_AUTOPILOT = 16
	MAV_AUTOPILOT_ASLUAV                                       MAV_AUTOPILOT = 17
	MAV_AUTOPILOT_SMARTAP                                      MAV_AUTOPILOT = 18
	MAV_AUTOPILOT_AIRRAILS                                     MAV_AUTOPILOT = 19
)

type MAV_BATTERY_CHARGE_STATE int

const (
	MAV_BATTERY_CHARGE_STATE_UNDEFINED MAV_BATTERY_CHARGE_STATE = 0
	MAV_BATTERY_CHARGE_STATE_OK        MAV_BATTERY_CHARGE_STATE = 1
	MAV_BATTERY_CHARGE_STATE_LOW       MAV_BATTERY_CHARGE_STATE = 2
	MAV_BATTERY_CHARGE_STATE_CRITICAL  MAV_BATTERY_CHARGE_STATE = 3
	MAV_BATTERY_CHARGE_STATE_EMERGENCY MAV_BATTERY_CHARGE_STATE = 4
	MAV_BATTERY_CHARGE_STATE_FAILED    MAV_BATTERY_CHARGE_STATE = 5
	MAV_BATTERY_CHARGE_STATE_UNHEALTHY MAV_BATTERY_CHARGE_STATE = 6
	MAV_BATTERY_CHARGE_STATE_CHARGING  MAV_BATTERY_CHARGE_STATE = 7
)

type MAV_BATTERY_FUNCTION int

const (
	MAV_BATTERY_FUNCTION_UNKNOWN    MAV_BATTERY_FUNCTION = 0
	MAV_BATTERY_FUNCTION_ALL        MAV_BATTERY_FUNCTION = 1
	MAV_BATTERY_FUNCTION_PROPULSION MAV_BATTERY_FUNCTION = 2
	MAV_BATTERY_FUNCTION_AVIONICS   MAV_BATTERY_FUNCTION = 3
	MAV_BATTERY_TYPE_PAYLOAD        MAV_BATTERY_FUNCTION = 4
)

type MAV_BATTERY_TYPE int

const (
	MAV_BATTERY_TYPE_UNKNOWN MAV_BATTERY_TYPE = 0
	MAV_BATTERY_TYPE_LIPO    MAV_BATTERY_TYPE = 1
	MAV_BATTERY_TYPE_LIFE    MAV_BATTERY_TYPE = 2
	MAV_BATTERY_TYPE_LION    MAV_BATTERY_TYPE = 3
	MAV_BATTERY_TYPE_NIMH    MAV_BATTERY_TYPE = 4
)

type MAV_CMD int

const (
	MAV_CMD_NAV_WAYPOINT                       MAV_CMD = 16
	MAV_CMD_NAV_LOITER_UNLIM                   MAV_CMD = 17
	MAV_CMD_NAV_LOITER_TURNS                   MAV_CMD = 18
	MAV_CMD_NAV_LOITER_TIME                    MAV_CMD = 19
	MAV_CMD_NAV_RETURN_TO_LAUNCH               MAV_CMD = 20
	MAV_CMD_NAV_LAND                           MAV_CMD = 21
	MAV_CMD_NAV_TAKEOFF                        MAV_CMD = 22
	MAV_CMD_NAV_LAND_LOCAL                     MAV_CMD = 23
	MAV_CMD_NAV_TAKEOFF_LOCAL                  MAV_CMD = 24
	MAV_CMD_NAV_FOLLOW                         MAV_CMD = 25
	MAV_CMD_NAV_CONTINUE_AND_CHANGE_ALT        MAV_CMD = 30
	MAV_CMD_NAV_LOITER_TO_ALT                  MAV_CMD = 31
	MAV_CMD_DO_FOLLOW                          MAV_CMD = 32
	MAV_CMD_DO_FOLLOW_REPOSITION               MAV_CMD = 33
	MAV_CMD_DO_ORBIT                           MAV_CMD = 34
	MAV_CMD_NAV_ROI                            MAV_CMD = 80
	MAV_CMD_NAV_PATHPLANNING                   MAV_CMD = 81
	MAV_CMD_NAV_SPLINE_WAYPOINT                MAV_CMD = 82
	MAV_CMD_NAV_VTOL_TAKEOFF                   MAV_CMD = 84
	MAV_CMD_NAV_VTOL_LAND                      MAV_CMD = 85
	MAV_CMD_NAV_GUIDED_ENABLE                  MAV_CMD = 92
	MAV_CMD_NAV_DELAY                          MAV_CMD = 93
	MAV_CMD_NAV_PAYLOAD_PLACE                  MAV_CMD = 94
	MAV_CMD_NAV_LAST                           MAV_CMD = 95
	MAV_CMD_CONDITION_DELAY                    MAV_CMD = 112
	MAV_CMD_CONDITION_CHANGE_ALT               MAV_CMD = 113
	MAV_CMD_CONDITION_DISTANCE                 MAV_CMD = 114
	MAV_CMD_CONDITION_YAW                      MAV_CMD = 115
	MAV_CMD_CONDITION_LAST                     MAV_CMD = 159
	MAV_CMD_DO_SET_MODE                        MAV_CMD = 176
	MAV_CMD_DO_JUMP                            MAV_CMD = 177
	MAV_CMD_DO_CHANGE_SPEED                    MAV_CMD = 178
	MAV_CMD_DO_SET_HOME                        MAV_CMD = 179
	MAV_CMD_DO_SET_PARAMETER                   MAV_CMD = 180
	MAV_CMD_DO_SET_RELAY                       MAV_CMD = 181
	MAV_CMD_DO_REPEAT_RELAY                    MAV_CMD = 182
	MAV_CMD_DO_SET_SERVO                       MAV_CMD = 183
	MAV_CMD_DO_REPEAT_SERVO                    MAV_CMD = 184
	MAV_CMD_DO_FLIGHTTERMINATION               MAV_CMD = 185
	MAV_CMD_DO_CHANGE_ALTITUDE                 MAV_CMD = 186
	MAV_CMD_DO_LAND_START                      MAV_CMD = 189
	MAV_CMD_DO_RALLY_LAND                      MAV_CMD = 190
	MAV_CMD_DO_GO_AROUND                       MAV_CMD = 191
	MAV_CMD_DO_REPOSITION                      MAV_CMD = 192
	MAV_CMD_DO_PAUSE_CONTINUE                  MAV_CMD = 193
	MAV_CMD_DO_SET_REVERSE                     MAV_CMD = 194
	MAV_CMD_DO_SET_ROI_LOCATION                MAV_CMD = 195
	MAV_CMD_DO_SET_ROI_WPNEXT_OFFSET           MAV_CMD = 196
	MAV_CMD_DO_SET_ROI_NONE                    MAV_CMD = 197
	MAV_CMD_DO_CONTROL_VIDEO                   MAV_CMD = 200
	MAV_CMD_DO_SET_ROI                         MAV_CMD = 201
	MAV_CMD_DO_DIGICAM_CONFIGURE               MAV_CMD = 202
	MAV_CMD_DO_DIGICAM_CONTROL                 MAV_CMD = 203
	MAV_CMD_DO_MOUNT_CONFIGURE                 MAV_CMD = 204
	MAV_CMD_DO_MOUNT_CONTROL                   MAV_CMD = 205
	MAV_CMD_DO_SET_CAM_TRIGG_DIST              MAV_CMD = 206
	MAV_CMD_DO_FENCE_ENABLE                    MAV_CMD = 207
	MAV_CMD_DO_PARACHUTE                       MAV_CMD = 208
	MAV_CMD_DO_MOTOR_TEST                      MAV_CMD = 209
	MAV_CMD_DO_INVERTED_FLIGHT                 MAV_CMD = 210
	MAV_CMD_NAV_SET_YAW_SPEED                  MAV_CMD = 213
	MAV_CMD_DO_SET_CAM_TRIGG_INTERVAL          MAV_CMD = 214
	MAV_CMD_DO_MOUNT_CONTROL_QUAT              MAV_CMD = 220
	MAV_CMD_DO_GUIDED_MASTER                   MAV_CMD = 221
	MAV_CMD_DO_GUIDED_LIMITS                   MAV_CMD = 222
	MAV_CMD_DO_ENGINE_CONTROL                  MAV_CMD = 223
	MAV_CMD_DO_SET_MISSION_CURRENT             MAV_CMD = 224
	MAV_CMD_DO_LAST                            MAV_CMD = 240
	MAV_CMD_PREFLIGHT_CALIBRATION              MAV_CMD = 241
	MAV_CMD_PREFLIGHT_SET_SENSOR_OFFSETS       MAV_CMD = 242
	MAV_CMD_PREFLIGHT_UAVCAN                   MAV_CMD = 243
	MAV_CMD_PREFLIGHT_STORAGE                  MAV_CMD = 245
	MAV_CMD_PREFLIGHT_REBOOT_SHUTDOWN          MAV_CMD = 246
	MAV_CMD_OVERRIDE_GOTO                      MAV_CMD = 252
	MAV_CMD_MISSION_START                      MAV_CMD = 300
	MAV_CMD_COMPONENT_ARM_DISARM               MAV_CMD = 400
	MAV_CMD_GET_HOME_POSITION                  MAV_CMD = 410
	MAV_CMD_START_RX_PAIR                      MAV_CMD = 500
	MAV_CMD_GET_MESSAGE_INTERVAL               MAV_CMD = 510
	MAV_CMD_SET_MESSAGE_INTERVAL               MAV_CMD = 511
	MAV_CMD_REQUEST_MESSAGE                    MAV_CMD = 512
	MAV_CMD_REQUEST_PROTOCOL_VERSION           MAV_CMD = 519
	MAV_CMD_REQUEST_AUTOPILOT_CAPABILITIES     MAV_CMD = 520
	MAV_CMD_REQUEST_CAMERA_INFORMATION         MAV_CMD = 521
	MAV_CMD_REQUEST_CAMERA_SETTINGS            MAV_CMD = 522
	MAV_CMD_REQUEST_STORAGE_INFORMATION        MAV_CMD = 525
	MAV_CMD_STORAGE_FORMAT                     MAV_CMD = 526
	MAV_CMD_REQUEST_CAMERA_CAPTURE_STATUS      MAV_CMD = 527
	MAV_CMD_REQUEST_FLIGHT_INFORMATION         MAV_CMD = 528
	MAV_CMD_RESET_CAMERA_SETTINGS              MAV_CMD = 529
	MAV_CMD_SET_CAMERA_MODE                    MAV_CMD = 530
	MAV_CMD_SET_CAMERA_ZOOM                    MAV_CMD = 531
	MAV_CMD_SET_CAMERA_FOCUS                   MAV_CMD = 532
	MAV_CMD_JUMP_TAG                           MAV_CMD = 600
	MAV_CMD_DO_JUMP_TAG                        MAV_CMD = 601
	MAV_CMD_IMAGE_START_CAPTURE                MAV_CMD = 2000
	MAV_CMD_IMAGE_STOP_CAPTURE                 MAV_CMD = 2001
	MAV_CMD_REQUEST_CAMERA_IMAGE_CAPTURE       MAV_CMD = 2002
	MAV_CMD_DO_TRIGGER_CONTROL                 MAV_CMD = 2003
	MAV_CMD_VIDEO_START_CAPTURE                MAV_CMD = 2500
	MAV_CMD_VIDEO_STOP_CAPTURE                 MAV_CMD = 2501
	MAV_CMD_VIDEO_START_STREAMING              MAV_CMD = 2502
	MAV_CMD_VIDEO_STOP_STREAMING               MAV_CMD = 2503
	MAV_CMD_REQUEST_VIDEO_STREAM_INFORMATION   MAV_CMD = 2504
	MAV_CMD_REQUEST_VIDEO_STREAM_STATUS        MAV_CMD = 2505
	MAV_CMD_LOGGING_START                      MAV_CMD = 2510
	MAV_CMD_LOGGING_STOP                       MAV_CMD = 2511
	MAV_CMD_AIRFRAME_CONFIGURATION             MAV_CMD = 2520
	MAV_CMD_CONTROL_HIGH_LATENCY               MAV_CMD = 2600
	MAV_CMD_PANORAMA_CREATE                    MAV_CMD = 2800
	MAV_CMD_DO_VTOL_TRANSITION                 MAV_CMD = 3000
	MAV_CMD_ARM_AUTHORIZATION_REQUEST          MAV_CMD = 3001
	MAV_CMD_SET_GUIDED_SUBMODE_STANDARD        MAV_CMD = 4000
	MAV_CMD_SET_GUIDED_SUBMODE_CIRCLE          MAV_CMD = 4001
	MAV_CMD_CONDITION_GATE                     MAV_CMD = 4501
	MAV_CMD_NAV_FENCE_RETURN_POINT             MAV_CMD = 5000
	MAV_CMD_NAV_FENCE_POLYGON_VERTEX_INCLUSION MAV_CMD = 5001
	MAV_CMD_NAV_FENCE_POLYGON_VERTEX_EXCLUSION MAV_CMD = 5002
	MAV_CMD_NAV_FENCE_CIRCLE_INCLUSION         MAV_CMD = 5003
	MAV_CMD_NAV_FENCE_CIRCLE_EXCLUSION         MAV_CMD = 5004
	MAV_CMD_NAV_RALLY_POINT                    MAV_CMD = 5100
	MAV_CMD_UAVCAN_GET_NODE_INFO               MAV_CMD = 5200
	MAV_CMD_PAYLOAD_PREPARE_DEPLOY             MAV_CMD = 30001
	MAV_CMD_PAYLOAD_CONTROL_DEPLOY             MAV_CMD = 30002
	MAV_CMD_WAYPOINT_USER_1                    MAV_CMD = 31000
	MAV_CMD_WAYPOINT_USER_2                    MAV_CMD = 31001
	MAV_CMD_WAYPOINT_USER_3                    MAV_CMD = 31002
	MAV_CMD_WAYPOINT_USER_4                    MAV_CMD = 31003
	MAV_CMD_WAYPOINT_USER_5                    MAV_CMD = 31004
	MAV_CMD_SPATIAL_USER_1                     MAV_CMD = 31005
	MAV_CMD_SPATIAL_USER_2                     MAV_CMD = 31006
	MAV_CMD_SPATIAL_USER_3                     MAV_CMD = 31007
	MAV_CMD_SPATIAL_USER_4                     MAV_CMD = 31008
	MAV_CMD_SPATIAL_USER_5                     MAV_CMD = 31009
	MAV_CMD_USER_1                             MAV_CMD = 31010
	MAV_CMD_USER_2                             MAV_CMD = 31011
	MAV_CMD_USER_3                             MAV_CMD = 31012
	MAV_CMD_USER_4                             MAV_CMD = 31013
	MAV_CMD_USER_5                             MAV_CMD = 31014
)

type MAV_CMD_ACK int

const (
	MAV_CMD_ACK_OK                                 MAV_CMD_ACK = 0
	MAV_CMD_ACK_ERR_FAIL                           MAV_CMD_ACK = 1
	MAV_CMD_ACK_ERR_ACCESS_DENIED                  MAV_CMD_ACK = 2
	MAV_CMD_ACK_ERR_NOT_SUPPORTED                  MAV_CMD_ACK = 3
	MAV_CMD_ACK_ERR_COORDINATE_FRAME_NOT_SUPPORTED MAV_CMD_ACK = 4
	MAV_CMD_ACK_ERR_COORDINATES_OUT_OF_RANGE       MAV_CMD_ACK = 5
	MAV_CMD_ACK_ERR_X_LAT_OUT_OF_RANGE             MAV_CMD_ACK = 6
	MAV_CMD_ACK_ERR_Y_LON_OUT_OF_RANGE             MAV_CMD_ACK = 7
	MAV_CMD_ACK_ERR_Z_ALT_OUT_OF_RANGE             MAV_CMD_ACK = 8
)

type MAV_COLLISION_ACTION int

const (
	MAV_COLLISION_ACTION_NONE               MAV_COLLISION_ACTION = 0
	MAV_COLLISION_ACTION_REPORT             MAV_COLLISION_ACTION = 1
	MAV_COLLISION_ACTION_ASCEND_OR_DESCEND  MAV_COLLISION_ACTION = 2
	MAV_COLLISION_ACTION_MOVE_HORIZONTALLY  MAV_COLLISION_ACTION = 3
	MAV_COLLISION_ACTION_MOVE_PERPENDICULAR MAV_COLLISION_ACTION = 4
	MAV_COLLISION_ACTION_RTL                MAV_COLLISION_ACTION = 5
	MAV_COLLISION_ACTION_HOVER              MAV_COLLISION_ACTION = 6
)

type MAV_COLLISION_SRC int

const (
	MAV_COLLISION_SRC_ADSB                   MAV_COLLISION_SRC = 0
	MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT MAV_COLLISION_SRC = 1
)

type MAV_COLLISION_THREAT_LEVEL int

const (
	MAV_COLLISION_THREAT_LEVEL_NONE MAV_COLLISION_THREAT_LEVEL = 0
	MAV_COLLISION_THREAT_LEVEL_LOW  MAV_COLLISION_THREAT_LEVEL = 1
	MAV_COLLISION_THREAT_LEVEL_HIGH MAV_COLLISION_THREAT_LEVEL = 2
)

type MAV_COMPONENT int

const (
	MAV_COMP_ID_ALL                      MAV_COMPONENT = 0
	MAV_COMP_ID_AUTOPILOT1               MAV_COMPONENT = 1
	MAV_COMP_ID_CAMERA                   MAV_COMPONENT = 100
	MAV_COMP_ID_CAMERA2                  MAV_COMPONENT = 101
	MAV_COMP_ID_CAMERA3                  MAV_COMPONENT = 102
	MAV_COMP_ID_CAMERA4                  MAV_COMPONENT = 103
	MAV_COMP_ID_CAMERA5                  MAV_COMPONENT = 104
	MAV_COMP_ID_CAMERA6                  MAV_COMPONENT = 105
	MAV_COMP_ID_SERVO1                   MAV_COMPONENT = 140
	MAV_COMP_ID_SERVO2                   MAV_COMPONENT = 141
	MAV_COMP_ID_SERVO3                   MAV_COMPONENT = 142
	MAV_COMP_ID_SERVO4                   MAV_COMPONENT = 143
	MAV_COMP_ID_SERVO5                   MAV_COMPONENT = 144
	MAV_COMP_ID_SERVO6                   MAV_COMPONENT = 145
	MAV_COMP_ID_SERVO7                   MAV_COMPONENT = 146
	MAV_COMP_ID_SERVO8                   MAV_COMPONENT = 147
	MAV_COMP_ID_SERVO9                   MAV_COMPONENT = 148
	MAV_COMP_ID_SERVO10                  MAV_COMPONENT = 149
	MAV_COMP_ID_SERVO11                  MAV_COMPONENT = 150
	MAV_COMP_ID_SERVO12                  MAV_COMPONENT = 151
	MAV_COMP_ID_SERVO13                  MAV_COMPONENT = 152
	MAV_COMP_ID_SERVO14                  MAV_COMPONENT = 153
	MAV_COMP_ID_GIMBAL                   MAV_COMPONENT = 154
	MAV_COMP_ID_LOG                      MAV_COMPONENT = 155
	MAV_COMP_ID_ADSB                     MAV_COMPONENT = 156
	MAV_COMP_ID_OSD                      MAV_COMPONENT = 157
	MAV_COMP_ID_PERIPHERAL               MAV_COMPONENT = 158
	MAV_COMP_ID_QX1_GIMBAL               MAV_COMPONENT = 159
	MAV_COMP_ID_FLARM                    MAV_COMPONENT = 160
	MAV_COMP_ID_MISSIONPLANNER           MAV_COMPONENT = 190
	MAV_COMP_ID_PATHPLANNER              MAV_COMPONENT = 195
	MAV_COMP_ID_OBSTACLE_AVOIDANCE       MAV_COMPONENT = 196
	MAV_COMP_ID_VISUAL_INERTIAL_ODOMETRY MAV_COMPONENT = 197
	MAV_COMP_ID_IMU                      MAV_COMPONENT = 200
	MAV_COMP_ID_IMU_2                    MAV_COMPONENT = 201
	MAV_COMP_ID_IMU_3                    MAV_COMPONENT = 202
	MAV_COMP_ID_GPS                      MAV_COMPONENT = 220
	MAV_COMP_ID_GPS2                     MAV_COMPONENT = 221
	MAV_COMP_ID_UDP_BRIDGE               MAV_COMPONENT = 240
	MAV_COMP_ID_UART_BRIDGE              MAV_COMPONENT = 241
	MAV_COMP_ID_SYSTEM_CONTROL           MAV_COMPONENT = 250
)

type MAV_DATA_STREAM int

const (
	MAV_DATA_STREAM_ALL             MAV_DATA_STREAM = 0
	MAV_DATA_STREAM_RAW_SENSORS     MAV_DATA_STREAM = 1
	MAV_DATA_STREAM_EXTENDED_STATUS MAV_DATA_STREAM = 2
	MAV_DATA_STREAM_RC_CHANNELS     MAV_DATA_STREAM = 3
	MAV_DATA_STREAM_RAW_CONTROLLER  MAV_DATA_STREAM = 4
	MAV_DATA_STREAM_POSITION        MAV_DATA_STREAM = 6
	MAV_DATA_STREAM_EXTRA1          MAV_DATA_STREAM = 10
	MAV_DATA_STREAM_EXTRA2          MAV_DATA_STREAM = 11
	MAV_DATA_STREAM_EXTRA3          MAV_DATA_STREAM = 12
)

type MAV_DISTANCE_SENSOR int

const (
	MAV_DISTANCE_SENSOR_LASER      MAV_DISTANCE_SENSOR = 0
	MAV_DISTANCE_SENSOR_ULTRASOUND MAV_DISTANCE_SENSOR = 1
	MAV_DISTANCE_SENSOR_INFRARED   MAV_DISTANCE_SENSOR = 2
	MAV_DISTANCE_SENSOR_RADAR      MAV_DISTANCE_SENSOR = 3
	MAV_DISTANCE_SENSOR_UNKNOWN    MAV_DISTANCE_SENSOR = 4
)

type MAV_DO_REPOSITION_FLAGS int

const (
	MAV_DO_REPOSITION_FLAGS_CHANGE_MODE MAV_DO_REPOSITION_FLAGS = 1
)

type MAV_ESTIMATOR_TYPE int

const (
	MAV_ESTIMATOR_TYPE_NAIVE   MAV_ESTIMATOR_TYPE = 1
	MAV_ESTIMATOR_TYPE_VISION  MAV_ESTIMATOR_TYPE = 2
	MAV_ESTIMATOR_TYPE_VIO     MAV_ESTIMATOR_TYPE = 3
	MAV_ESTIMATOR_TYPE_GPS     MAV_ESTIMATOR_TYPE = 4
	MAV_ESTIMATOR_TYPE_GPS_INS MAV_ESTIMATOR_TYPE = 5
)

type MAV_FRAME int

const (
	MAV_FRAME_GLOBAL                  MAV_FRAME = 0
	MAV_FRAME_LOCAL_NED               MAV_FRAME = 1
	MAV_FRAME_MISSION                 MAV_FRAME = 2
	MAV_FRAME_GLOBAL_RELATIVE_ALT     MAV_FRAME = 3
	MAV_FRAME_LOCAL_ENU               MAV_FRAME = 4
	MAV_FRAME_GLOBAL_INT              MAV_FRAME = 5
	MAV_FRAME_GLOBAL_RELATIVE_ALT_INT MAV_FRAME = 6
	MAV_FRAME_LOCAL_OFFSET_NED        MAV_FRAME = 7
	MAV_FRAME_BODY_NED                MAV_FRAME = 8
	MAV_FRAME_BODY_OFFSET_NED         MAV_FRAME = 9
	MAV_FRAME_GLOBAL_TERRAIN_ALT      MAV_FRAME = 10
	MAV_FRAME_GLOBAL_TERRAIN_ALT_INT  MAV_FRAME = 11
	MAV_FRAME_BODY_FRD                MAV_FRAME = 12
	MAV_FRAME_BODY_FLU                MAV_FRAME = 13
	MAV_FRAME_MOCAP_NED               MAV_FRAME = 14
	MAV_FRAME_MOCAP_ENU               MAV_FRAME = 15
	MAV_FRAME_VISION_NED              MAV_FRAME = 16
	MAV_FRAME_VISION_ENU              MAV_FRAME = 17
	MAV_FRAME_ESTIM_NED               MAV_FRAME = 18
	MAV_FRAME_ESTIM_ENU               MAV_FRAME = 19
)

type MAV_GOTO int

const (
	MAV_GOTO_DO_HOLD                    MAV_GOTO = 0
	MAV_GOTO_DO_CONTINUE                MAV_GOTO = 1
	MAV_GOTO_HOLD_AT_CURRENT_POSITION   MAV_GOTO = 2
	MAV_GOTO_HOLD_AT_SPECIFIED_POSITION MAV_GOTO = 3
)

type MAV_LANDED_STATE int

const (
	MAV_LANDED_STATE_UNDEFINED MAV_LANDED_STATE = 0
	MAV_LANDED_STATE_ON_GROUND MAV_LANDED_STATE = 1
	MAV_LANDED_STATE_IN_AIR    MAV_LANDED_STATE = 2
	MAV_LANDED_STATE_TAKEOFF   MAV_LANDED_STATE = 3
	MAV_LANDED_STATE_LANDING   MAV_LANDED_STATE = 4
)

type MAV_MISSION_RESULT int

const (
	MAV_MISSION_ACCEPTED            MAV_MISSION_RESULT = 0
	MAV_MISSION_ERROR               MAV_MISSION_RESULT = 1
	MAV_MISSION_UNSUPPORTED_FRAME   MAV_MISSION_RESULT = 2
	MAV_MISSION_UNSUPPORTED         MAV_MISSION_RESULT = 3
	MAV_MISSION_NO_SPACE            MAV_MISSION_RESULT = 4
	MAV_MISSION_INVALID             MAV_MISSION_RESULT = 5
	MAV_MISSION_INVALID_PARAM1      MAV_MISSION_RESULT = 6
	MAV_MISSION_INVALID_PARAM2      MAV_MISSION_RESULT = 7
	MAV_MISSION_INVALID_PARAM3      MAV_MISSION_RESULT = 8
	MAV_MISSION_INVALID_PARAM4      MAV_MISSION_RESULT = 9
	MAV_MISSION_INVALID_PARAM5_X    MAV_MISSION_RESULT = 10
	MAV_MISSION_INVALID_PARAM6_Y    MAV_MISSION_RESULT = 11
	MAV_MISSION_INVALID_PARAM7      MAV_MISSION_RESULT = 12
	MAV_MISSION_INVALID_SEQUENCE    MAV_MISSION_RESULT = 13
	MAV_MISSION_DENIED              MAV_MISSION_RESULT = 14
	MAV_MISSION_OPERATION_CANCELLED MAV_MISSION_RESULT = 15
)

type MAV_MISSION_TYPE int

const (
	MAV_MISSION_TYPE_MISSION MAV_MISSION_TYPE = 0
	MAV_MISSION_TYPE_FENCE   MAV_MISSION_TYPE = 1
	MAV_MISSION_TYPE_RALLY   MAV_MISSION_TYPE = 2
	MAV_MISSION_TYPE_ALL     MAV_MISSION_TYPE = 255
)

type MAV_MODE int

const (
	MAV_MODE_PREFLIGHT          MAV_MODE = 0
	MAV_MODE_STABILIZE_DISARMED MAV_MODE = 80
	MAV_MODE_STABILIZE_ARMED    MAV_MODE = 208
	MAV_MODE_MANUAL_DISARMED    MAV_MODE = 64
	MAV_MODE_MANUAL_ARMED       MAV_MODE = 192
	MAV_MODE_GUIDED_DISARMED    MAV_MODE = 88
	MAV_MODE_GUIDED_ARMED       MAV_MODE = 216
	MAV_MODE_AUTO_DISARMED      MAV_MODE = 92
	MAV_MODE_AUTO_ARMED         MAV_MODE = 220
	MAV_MODE_TEST_DISARMED      MAV_MODE = 66
	MAV_MODE_TEST_ARMED         MAV_MODE = 194
)

type MAV_MODE_FLAG int

const (
	MAV_MODE_FLAG_SAFETY_ARMED         MAV_MODE_FLAG = 128
	MAV_MODE_FLAG_MANUAL_INPUT_ENABLED MAV_MODE_FLAG = 64
	MAV_MODE_FLAG_HIL_ENABLED          MAV_MODE_FLAG = 32
	MAV_MODE_FLAG_STABILIZE_ENABLED    MAV_MODE_FLAG = 16
	MAV_MODE_FLAG_GUIDED_ENABLED       MAV_MODE_FLAG = 8
	MAV_MODE_FLAG_AUTO_ENABLED         MAV_MODE_FLAG = 4
	MAV_MODE_FLAG_TEST_ENABLED         MAV_MODE_FLAG = 2
	MAV_MODE_FLAG_CUSTOM_MODE_ENABLED  MAV_MODE_FLAG = 1
)

type MAV_MODE_FLAG_DECODE_POSITION int

const (
	MAV_MODE_FLAG_DECODE_POSITION_SAFETY      MAV_MODE_FLAG_DECODE_POSITION = 128
	MAV_MODE_FLAG_DECODE_POSITION_MANUAL      MAV_MODE_FLAG_DECODE_POSITION = 64
	MAV_MODE_FLAG_DECODE_POSITION_HIL         MAV_MODE_FLAG_DECODE_POSITION = 32
	MAV_MODE_FLAG_DECODE_POSITION_STABILIZE   MAV_MODE_FLAG_DECODE_POSITION = 16
	MAV_MODE_FLAG_DECODE_POSITION_GUIDED      MAV_MODE_FLAG_DECODE_POSITION = 8
	MAV_MODE_FLAG_DECODE_POSITION_AUTO        MAV_MODE_FLAG_DECODE_POSITION = 4
	MAV_MODE_FLAG_DECODE_POSITION_TEST        MAV_MODE_FLAG_DECODE_POSITION = 2
	MAV_MODE_FLAG_DECODE_POSITION_CUSTOM_MODE MAV_MODE_FLAG_DECODE_POSITION = 1
)

type MAV_MOUNT_MODE int

const (
	MAV_MOUNT_MODE_RETRACT           MAV_MOUNT_MODE = 0
	MAV_MOUNT_MODE_NEUTRAL           MAV_MOUNT_MODE = 1
	MAV_MOUNT_MODE_MAVLINK_TARGETING MAV_MOUNT_MODE = 2
	MAV_MOUNT_MODE_RC_TARGETING      MAV_MOUNT_MODE = 3
	MAV_MOUNT_MODE_GPS_POINT         MAV_MOUNT_MODE = 4
)

type MAV_PARAM_EXT_TYPE int

const (
	MAV_PARAM_EXT_TYPE_UINT8  MAV_PARAM_EXT_TYPE = 1
	MAV_PARAM_EXT_TYPE_INT8   MAV_PARAM_EXT_TYPE = 2
	MAV_PARAM_EXT_TYPE_UINT16 MAV_PARAM_EXT_TYPE = 3
	MAV_PARAM_EXT_TYPE_INT16  MAV_PARAM_EXT_TYPE = 4
	MAV_PARAM_EXT_TYPE_UINT32 MAV_PARAM_EXT_TYPE = 5
	MAV_PARAM_EXT_TYPE_INT32  MAV_PARAM_EXT_TYPE = 6
	MAV_PARAM_EXT_TYPE_UINT64 MAV_PARAM_EXT_TYPE = 7
	MAV_PARAM_EXT_TYPE_INT64  MAV_PARAM_EXT_TYPE = 8
	MAV_PARAM_EXT_TYPE_REAL32 MAV_PARAM_EXT_TYPE = 9
	MAV_PARAM_EXT_TYPE_REAL64 MAV_PARAM_EXT_TYPE = 10
	MAV_PARAM_EXT_TYPE_CUSTOM MAV_PARAM_EXT_TYPE = 11
)

type MAV_PARAM_TYPE int

const (
	MAV_PARAM_TYPE_UINT8  MAV_PARAM_TYPE = 1
	MAV_PARAM_TYPE_INT8   MAV_PARAM_TYPE = 2
	MAV_PARAM_TYPE_UINT16 MAV_PARAM_TYPE = 3
	MAV_PARAM_TYPE_INT16  MAV_PARAM_TYPE = 4
	MAV_PARAM_TYPE_UINT32 MAV_PARAM_TYPE = 5
	MAV_PARAM_TYPE_INT32  MAV_PARAM_TYPE = 6
	MAV_PARAM_TYPE_UINT64 MAV_PARAM_TYPE = 7
	MAV_PARAM_TYPE_INT64  MAV_PARAM_TYPE = 8
	MAV_PARAM_TYPE_REAL32 MAV_PARAM_TYPE = 9
	MAV_PARAM_TYPE_REAL64 MAV_PARAM_TYPE = 10
)

type MAV_POWER_STATUS int

const (
	MAV_POWER_STATUS_BRICK_VALID                MAV_POWER_STATUS = 1
	MAV_POWER_STATUS_SERVO_VALID                MAV_POWER_STATUS = 2
	MAV_POWER_STATUS_USB_CONNECTED              MAV_POWER_STATUS = 4
	MAV_POWER_STATUS_PERIPH_OVERCURRENT         MAV_POWER_STATUS = 8
	MAV_POWER_STATUS_PERIPH_HIPOWER_OVERCURRENT MAV_POWER_STATUS = 16
	MAV_POWER_STATUS_CHANGED                    MAV_POWER_STATUS = 32
)

type MAV_PROTOCOL_CAPABILITY int

const (
	MAV_PROTOCOL_CAPABILITY_MISSION_FLOAT                  MAV_PROTOCOL_CAPABILITY = 1
	MAV_PROTOCOL_CAPABILITY_PARAM_FLOAT                    MAV_PROTOCOL_CAPABILITY = 2
	MAV_PROTOCOL_CAPABILITY_MISSION_INT                    MAV_PROTOCOL_CAPABILITY = 4
	MAV_PROTOCOL_CAPABILITY_COMMAND_INT                    MAV_PROTOCOL_CAPABILITY = 8
	MAV_PROTOCOL_CAPABILITY_PARAM_UNION                    MAV_PROTOCOL_CAPABILITY = 16
	MAV_PROTOCOL_CAPABILITY_FTP                            MAV_PROTOCOL_CAPABILITY = 32
	MAV_PROTOCOL_CAPABILITY_SET_ATTITUDE_TARGET            MAV_PROTOCOL_CAPABILITY = 64
	MAV_PROTOCOL_CAPABILITY_SET_POSITION_TARGET_LOCAL_NED  MAV_PROTOCOL_CAPABILITY = 128
	MAV_PROTOCOL_CAPABILITY_SET_POSITION_TARGET_GLOBAL_INT MAV_PROTOCOL_CAPABILITY = 256
	MAV_PROTOCOL_CAPABILITY_TERRAIN                        MAV_PROTOCOL_CAPABILITY = 512
	MAV_PROTOCOL_CAPABILITY_SET_ACTUATOR_TARGET            MAV_PROTOCOL_CAPABILITY = 1024
	MAV_PROTOCOL_CAPABILITY_FLIGHT_TERMINATION             MAV_PROTOCOL_CAPABILITY = 2048
	MAV_PROTOCOL_CAPABILITY_COMPASS_CALIBRATION            MAV_PROTOCOL_CAPABILITY = 4096
	MAV_PROTOCOL_CAPABILITY_MAVLINK2                       MAV_PROTOCOL_CAPABILITY = 8192
	MAV_PROTOCOL_CAPABILITY_MISSION_FENCE                  MAV_PROTOCOL_CAPABILITY = 16384
	MAV_PROTOCOL_CAPABILITY_MISSION_RALLY                  MAV_PROTOCOL_CAPABILITY = 32768
	MAV_PROTOCOL_CAPABILITY_FLIGHT_INFORMATION             MAV_PROTOCOL_CAPABILITY = 65536
)

type MAV_RESULT int

const (
	MAV_RESULT_ACCEPTED             MAV_RESULT = 0
	MAV_RESULT_TEMPORARILY_REJECTED MAV_RESULT = 1
	MAV_RESULT_DENIED               MAV_RESULT = 2
	MAV_RESULT_UNSUPPORTED          MAV_RESULT = 3
	MAV_RESULT_FAILED               MAV_RESULT = 4
	MAV_RESULT_IN_PROGRESS          MAV_RESULT = 5
)

type MAV_ROI int

const (
	MAV_ROI_NONE     MAV_ROI = 0
	MAV_ROI_WPNEXT   MAV_ROI = 1
	MAV_ROI_WPINDEX  MAV_ROI = 2
	MAV_ROI_LOCATION MAV_ROI = 3
	MAV_ROI_TARGET   MAV_ROI = 4
)

type MAV_SENSOR_ORIENTATION int

const (
	MAV_SENSOR_ROTATION_NONE                     MAV_SENSOR_ORIENTATION = 0
	MAV_SENSOR_ROTATION_YAW_45                   MAV_SENSOR_ORIENTATION = 1
	MAV_SENSOR_ROTATION_YAW_90                   MAV_SENSOR_ORIENTATION = 2
	MAV_SENSOR_ROTATION_YAW_135                  MAV_SENSOR_ORIENTATION = 3
	MAV_SENSOR_ROTATION_YAW_180                  MAV_SENSOR_ORIENTATION = 4
	MAV_SENSOR_ROTATION_YAW_225                  MAV_SENSOR_ORIENTATION = 5
	MAV_SENSOR_ROTATION_YAW_270                  MAV_SENSOR_ORIENTATION = 6
	MAV_SENSOR_ROTATION_YAW_315                  MAV_SENSOR_ORIENTATION = 7
	MAV_SENSOR_ROTATION_ROLL_180                 MAV_SENSOR_ORIENTATION = 8
	MAV_SENSOR_ROTATION_ROLL_180_YAW_45          MAV_SENSOR_ORIENTATION = 9
	MAV_SENSOR_ROTATION_ROLL_180_YAW_90          MAV_SENSOR_ORIENTATION = 10
	MAV_SENSOR_ROTATION_ROLL_180_YAW_135         MAV_SENSOR_ORIENTATION = 11
	MAV_SENSOR_ROTATION_PITCH_180                MAV_SENSOR_ORIENTATION = 12
	MAV_SENSOR_ROTATION_ROLL_180_YAW_225         MAV_SENSOR_ORIENTATION = 13
	MAV_SENSOR_ROTATION_ROLL_180_YAW_270         MAV_SENSOR_ORIENTATION = 14
	MAV_SENSOR_ROTATION_ROLL_180_YAW_315         MAV_SENSOR_ORIENTATION = 15
	MAV_SENSOR_ROTATION_ROLL_90                  MAV_SENSOR_ORIENTATION = 16
	MAV_SENSOR_ROTATION_ROLL_90_YAW_45           MAV_SENSOR_ORIENTATION = 17
	MAV_SENSOR_ROTATION_ROLL_90_YAW_90           MAV_SENSOR_ORIENTATION = 18
	MAV_SENSOR_ROTATION_ROLL_90_YAW_135          MAV_SENSOR_ORIENTATION = 19
	MAV_SENSOR_ROTATION_ROLL_270                 MAV_SENSOR_ORIENTATION = 20
	MAV_SENSOR_ROTATION_ROLL_270_YAW_45          MAV_SENSOR_ORIENTATION = 21
	MAV_SENSOR_ROTATION_ROLL_270_YAW_90          MAV_SENSOR_ORIENTATION = 22
	MAV_SENSOR_ROTATION_ROLL_270_YAW_135         MAV_SENSOR_ORIENTATION = 23
	MAV_SENSOR_ROTATION_PITCH_90                 MAV_SENSOR_ORIENTATION = 24
	MAV_SENSOR_ROTATION_PITCH_270                MAV_SENSOR_ORIENTATION = 25
	MAV_SENSOR_ROTATION_PITCH_180_YAW_90         MAV_SENSOR_ORIENTATION = 26
	MAV_SENSOR_ROTATION_PITCH_180_YAW_270        MAV_SENSOR_ORIENTATION = 27
	MAV_SENSOR_ROTATION_ROLL_90_PITCH_90         MAV_SENSOR_ORIENTATION = 28
	MAV_SENSOR_ROTATION_ROLL_180_PITCH_90        MAV_SENSOR_ORIENTATION = 29
	MAV_SENSOR_ROTATION_ROLL_270_PITCH_90        MAV_SENSOR_ORIENTATION = 30
	MAV_SENSOR_ROTATION_ROLL_90_PITCH_180        MAV_SENSOR_ORIENTATION = 31
	MAV_SENSOR_ROTATION_ROLL_270_PITCH_180       MAV_SENSOR_ORIENTATION = 32
	MAV_SENSOR_ROTATION_ROLL_90_PITCH_270        MAV_SENSOR_ORIENTATION = 33
	MAV_SENSOR_ROTATION_ROLL_180_PITCH_270       MAV_SENSOR_ORIENTATION = 34
	MAV_SENSOR_ROTATION_ROLL_270_PITCH_270       MAV_SENSOR_ORIENTATION = 35
	MAV_SENSOR_ROTATION_ROLL_90_PITCH_180_YAW_90 MAV_SENSOR_ORIENTATION = 36
	MAV_SENSOR_ROTATION_ROLL_90_YAW_270          MAV_SENSOR_ORIENTATION = 37
	MAV_SENSOR_ROTATION_ROLL_90_PITCH_68_YAW_293 MAV_SENSOR_ORIENTATION = 38
	MAV_SENSOR_ROTATION_PITCH_315                MAV_SENSOR_ORIENTATION = 39
	MAV_SENSOR_ROTATION_ROLL_90_PITCH_315        MAV_SENSOR_ORIENTATION = 40
	MAV_SENSOR_ROTATION_CUSTOM                   MAV_SENSOR_ORIENTATION = 100
)

type MAV_SEVERITY int

const (
	MAV_SEVERITY_EMERGENCY MAV_SEVERITY = 0
	MAV_SEVERITY_ALERT     MAV_SEVERITY = 1
	MAV_SEVERITY_CRITICAL  MAV_SEVERITY = 2
	MAV_SEVERITY_ERROR     MAV_SEVERITY = 3
	MAV_SEVERITY_WARNING   MAV_SEVERITY = 4
	MAV_SEVERITY_NOTICE    MAV_SEVERITY = 5
	MAV_SEVERITY_INFO      MAV_SEVERITY = 6
	MAV_SEVERITY_DEBUG     MAV_SEVERITY = 7
)

type MAV_SMART_BATTERY_FAULT int

const (
	MAV_SMART_BATTERY_FAULT_DEEP_DISCHARGE    MAV_SMART_BATTERY_FAULT = 1
	MAV_SMART_BATTERY_FAULT_SPIKES            MAV_SMART_BATTERY_FAULT = 2
	MAV_SMART_BATTERY_FAULT_SINGLE_CELL_FAIL  MAV_SMART_BATTERY_FAULT = 4
	MAV_SMART_BATTERY_FAULT_OVER_CURRENT      MAV_SMART_BATTERY_FAULT = 8
	MAV_SMART_BATTERY_FAULT_OVER_TEMPERATURE  MAV_SMART_BATTERY_FAULT = 16
	MAV_SMART_BATTERY_FAULT_UNDER_TEMPERATURE MAV_SMART_BATTERY_FAULT = 32
)

type MAV_STATE int

const (
	MAV_STATE_UNINIT             MAV_STATE = 0
	MAV_STATE_BOOT               MAV_STATE = 1
	MAV_STATE_CALIBRATING        MAV_STATE = 2
	MAV_STATE_STANDBY            MAV_STATE = 3
	MAV_STATE_ACTIVE             MAV_STATE = 4
	MAV_STATE_CRITICAL           MAV_STATE = 5
	MAV_STATE_EMERGENCY          MAV_STATE = 6
	MAV_STATE_POWEROFF           MAV_STATE = 7
	MAV_STATE_FLIGHT_TERMINATION MAV_STATE = 8
)

type MAV_SYS_STATUS_SENSOR int

const (
	MAV_SYS_STATUS_SENSOR_3D_GYRO                MAV_SYS_STATUS_SENSOR = 1
	MAV_SYS_STATUS_SENSOR_3D_ACCEL               MAV_SYS_STATUS_SENSOR = 2
	MAV_SYS_STATUS_SENSOR_3D_MAG                 MAV_SYS_STATUS_SENSOR = 4
	MAV_SYS_STATUS_SENSOR_ABSOLUTE_PRESSURE      MAV_SYS_STATUS_SENSOR = 8
	MAV_SYS_STATUS_SENSOR_DIFFERENTIAL_PRESSURE  MAV_SYS_STATUS_SENSOR = 16
	MAV_SYS_STATUS_SENSOR_GPS                    MAV_SYS_STATUS_SENSOR = 32
	MAV_SYS_STATUS_SENSOR_OPTICAL_FLOW           MAV_SYS_STATUS_SENSOR = 64
	MAV_SYS_STATUS_SENSOR_VISION_POSITION        MAV_SYS_STATUS_SENSOR = 128
	MAV_SYS_STATUS_SENSOR_LASER_POSITION         MAV_SYS_STATUS_SENSOR = 256
	MAV_SYS_STATUS_SENSOR_EXTERNAL_GROUND_TRUTH  MAV_SYS_STATUS_SENSOR = 512
	MAV_SYS_STATUS_SENSOR_ANGULAR_RATE_CONTROL   MAV_SYS_STATUS_SENSOR = 1024
	MAV_SYS_STATUS_SENSOR_ATTITUDE_STABILIZATION MAV_SYS_STATUS_SENSOR = 2048
	MAV_SYS_STATUS_SENSOR_YAW_POSITION           MAV_SYS_STATUS_SENSOR = 4096
	MAV_SYS_STATUS_SENSOR_Z_ALTITUDE_CONTROL     MAV_SYS_STATUS_SENSOR = 8192
	MAV_SYS_STATUS_SENSOR_XY_POSITION_CONTROL    MAV_SYS_STATUS_SENSOR = 16384
	MAV_SYS_STATUS_SENSOR_MOTOR_OUTPUTS          MAV_SYS_STATUS_SENSOR = 32768
	MAV_SYS_STATUS_SENSOR_RC_RECEIVER            MAV_SYS_STATUS_SENSOR = 65536
	MAV_SYS_STATUS_SENSOR_3D_GYRO2               MAV_SYS_STATUS_SENSOR = 131072
	MAV_SYS_STATUS_SENSOR_3D_ACCEL2              MAV_SYS_STATUS_SENSOR = 262144
	MAV_SYS_STATUS_SENSOR_3D_MAG2                MAV_SYS_STATUS_SENSOR = 524288
	MAV_SYS_STATUS_GEOFENCE                      MAV_SYS_STATUS_SENSOR = 1048576
	MAV_SYS_STATUS_AHRS                          MAV_SYS_STATUS_SENSOR = 2097152
	MAV_SYS_STATUS_TERRAIN                       MAV_SYS_STATUS_SENSOR = 4194304
	MAV_SYS_STATUS_REVERSE_MOTOR                 MAV_SYS_STATUS_SENSOR = 8388608
	MAV_SYS_STATUS_LOGGING                       MAV_SYS_STATUS_SENSOR = 16777216
	MAV_SYS_STATUS_SENSOR_BATTERY                MAV_SYS_STATUS_SENSOR = 33554432
	MAV_SYS_STATUS_SENSOR_PROXIMITY              MAV_SYS_STATUS_SENSOR = 67108864
	MAV_SYS_STATUS_SENSOR_SATCOM                 MAV_SYS_STATUS_SENSOR = 134217728
)

type MAV_TYPE int

const (
	MAV_TYPE_GENERIC            MAV_TYPE = 0
	MAV_TYPE_FIXED_WING         MAV_TYPE = 1
	MAV_TYPE_QUADROTOR          MAV_TYPE = 2
	MAV_TYPE_COAXIAL            MAV_TYPE = 3
	MAV_TYPE_HELICOPTER         MAV_TYPE = 4
	MAV_TYPE_ANTENNA_TRACKER    MAV_TYPE = 5
	MAV_TYPE_GCS                MAV_TYPE = 6
	MAV_TYPE_AIRSHIP            MAV_TYPE = 7
	MAV_TYPE_FREE_BALLOON       MAV_TYPE = 8
	MAV_TYPE_ROCKET             MAV_TYPE = 9
	MAV_TYPE_GROUND_ROVER       MAV_TYPE = 10
	MAV_TYPE_SURFACE_BOAT       MAV_TYPE = 11
	MAV_TYPE_SUBMARINE          MAV_TYPE = 12
	MAV_TYPE_HEXAROTOR          MAV_TYPE = 13
	MAV_TYPE_OCTOROTOR          MAV_TYPE = 14
	MAV_TYPE_TRICOPTER          MAV_TYPE = 15
	MAV_TYPE_FLAPPING_WING      MAV_TYPE = 16
	MAV_TYPE_KITE               MAV_TYPE = 17
	MAV_TYPE_ONBOARD_CONTROLLER MAV_TYPE = 18
	MAV_TYPE_VTOL_DUOROTOR      MAV_TYPE = 19
	MAV_TYPE_VTOL_QUADROTOR     MAV_TYPE = 20
	MAV_TYPE_VTOL_TILTROTOR     MAV_TYPE = 21
	MAV_TYPE_VTOL_RESERVED2     MAV_TYPE = 22
	MAV_TYPE_VTOL_RESERVED3     MAV_TYPE = 23
	MAV_TYPE_VTOL_RESERVED4     MAV_TYPE = 24
	MAV_TYPE_VTOL_RESERVED5     MAV_TYPE = 25
	MAV_TYPE_GIMBAL             MAV_TYPE = 26
	MAV_TYPE_ADSB               MAV_TYPE = 27
	MAV_TYPE_PARAFOIL           MAV_TYPE = 28
	MAV_TYPE_DODECAROTOR        MAV_TYPE = 29
	MAV_TYPE_CAMERA             MAV_TYPE = 30
	MAV_TYPE_CHARGING_STATION   MAV_TYPE = 31
	MAV_TYPE_FLARM              MAV_TYPE = 32
)

type MAV_VTOL_STATE int

const (
	MAV_VTOL_STATE_UNDEFINED        MAV_VTOL_STATE = 0
	MAV_VTOL_STATE_TRANSITION_TO_FW MAV_VTOL_STATE = 1
	MAV_VTOL_STATE_TRANSITION_TO_MC MAV_VTOL_STATE = 2
	MAV_VTOL_STATE_MC               MAV_VTOL_STATE = 3
	MAV_VTOL_STATE_FW               MAV_VTOL_STATE = 4
)

type MOTOR_TEST_ORDER int

const (
	MOTOR_TEST_ORDER_DEFAULT  MOTOR_TEST_ORDER = 0
	MOTOR_TEST_ORDER_SEQUENCE MOTOR_TEST_ORDER = 1
	MOTOR_TEST_ORDER_BOARD    MOTOR_TEST_ORDER = 2
)

type MOTOR_TEST_THROTTLE_TYPE int

const (
	MOTOR_TEST_THROTTLE_PERCENT MOTOR_TEST_THROTTLE_TYPE = 0
	MOTOR_TEST_THROTTLE_PWM     MOTOR_TEST_THROTTLE_TYPE = 1
	MOTOR_TEST_THROTTLE_PILOT   MOTOR_TEST_THROTTLE_TYPE = 2
	MOTOR_TEST_COMPASS_CAL      MOTOR_TEST_THROTTLE_TYPE = 3
)

type PARACHUTE_ACTION int

const (
	PARACHUTE_DISABLE PARACHUTE_ACTION = 0
	PARACHUTE_ENABLE  PARACHUTE_ACTION = 1
	PARACHUTE_RELEASE PARACHUTE_ACTION = 2
)

type PARAM_ACK int

const (
	PARAM_ACK_ACCEPTED          PARAM_ACK = 0
	PARAM_ACK_VALUE_UNSUPPORTED PARAM_ACK = 1
	PARAM_ACK_FAILED            PARAM_ACK = 2
	PARAM_ACK_IN_PROGRESS       PARAM_ACK = 3
)

type POSITION_TARGET_TYPEMASK int

const (
	POSITION_TARGET_TYPEMASK_X_IGNORE        POSITION_TARGET_TYPEMASK = 1
	POSITION_TARGET_TYPEMASK_Y_IGNORE        POSITION_TARGET_TYPEMASK = 2
	POSITION_TARGET_TYPEMASK_Z_IGNORE        POSITION_TARGET_TYPEMASK = 4
	POSITION_TARGET_TYPEMASK_VX_IGNORE       POSITION_TARGET_TYPEMASK = 8
	POSITION_TARGET_TYPEMASK_VY_IGNORE       POSITION_TARGET_TYPEMASK = 16
	POSITION_TARGET_TYPEMASK_VZ_IGNORE       POSITION_TARGET_TYPEMASK = 32
	POSITION_TARGET_TYPEMASK_AX_IGNORE       POSITION_TARGET_TYPEMASK = 64
	POSITION_TARGET_TYPEMASK_AY_IGNORE       POSITION_TARGET_TYPEMASK = 128
	POSITION_TARGET_TYPEMASK_AZ_IGNORE       POSITION_TARGET_TYPEMASK = 256
	POSITION_TARGET_TYPEMASK_FORCE_SET       POSITION_TARGET_TYPEMASK = 512
	POSITION_TARGET_TYPEMASK_YAW_IGNORE      POSITION_TARGET_TYPEMASK = 1024
	POSITION_TARGET_TYPEMASK_YAW_RATE_IGNORE POSITION_TARGET_TYPEMASK = 2048
)

type PRECISION_LAND_MODE int

const (
	PRECISION_LAND_MODE_DISABLED      PRECISION_LAND_MODE = 0
	PRECISION_LAND_MODE_OPPORTUNISTIC PRECISION_LAND_MODE = 1
	PRECISION_LAND_MODE_REQUIRED      PRECISION_LAND_MODE = 2
)

type RC_TYPE int

const (
	RC_TYPE_SPEKTRUM_DSM2 RC_TYPE = 0
	RC_TYPE_SPEKTRUM_DSMX RC_TYPE = 1
)

type RTK_BASELINE_COORDINATE_SYSTEM int

const (
	RTK_BASELINE_COORDINATE_SYSTEM_ECEF RTK_BASELINE_COORDINATE_SYSTEM = 0
	RTK_BASELINE_COORDINATE_SYSTEM_NED  RTK_BASELINE_COORDINATE_SYSTEM = 1
)

type SERIAL_CONTROL_DEV int

const (
	SERIAL_CONTROL_DEV_TELEM1 SERIAL_CONTROL_DEV = 0
	SERIAL_CONTROL_DEV_TELEM2 SERIAL_CONTROL_DEV = 1
	SERIAL_CONTROL_DEV_GPS1   SERIAL_CONTROL_DEV = 2
	SERIAL_CONTROL_DEV_GPS2   SERIAL_CONTROL_DEV = 3
	SERIAL_CONTROL_DEV_SHELL  SERIAL_CONTROL_DEV = 10
)

type SERIAL_CONTROL_FLAG int

const (
	SERIAL_CONTROL_FLAG_REPLY     SERIAL_CONTROL_FLAG = 1
	SERIAL_CONTROL_FLAG_RESPOND   SERIAL_CONTROL_FLAG = 2
	SERIAL_CONTROL_FLAG_EXCLUSIVE SERIAL_CONTROL_FLAG = 4
	SERIAL_CONTROL_FLAG_BLOCKING  SERIAL_CONTROL_FLAG = 8
	SERIAL_CONTROL_FLAG_MULTI     SERIAL_CONTROL_FLAG = 16
)

type SET_FOCUS_TYPE int

const (
	FOCUS_TYPE_STEP       SET_FOCUS_TYPE = 0
	FOCUS_TYPE_CONTINUOUS SET_FOCUS_TYPE = 1
	FOCUS_TYPE_RANGE      SET_FOCUS_TYPE = 2
)

type UALBERTA_AUTOPILOT_MODE int

const (
	MODE_MANUAL_DIRECT UALBERTA_AUTOPILOT_MODE = 0
	MODE_MANUAL_SCALED UALBERTA_AUTOPILOT_MODE = 1
	MODE_AUTO_PID_ATT  UALBERTA_AUTOPILOT_MODE = 2
	MODE_AUTO_PID_VEL  UALBERTA_AUTOPILOT_MODE = 3
	MODE_AUTO_PID_POS  UALBERTA_AUTOPILOT_MODE = 4
)

type UALBERTA_NAV_MODE int

const (
	NAV_AHRS_INIT    UALBERTA_NAV_MODE = 0
	NAV_AHRS         UALBERTA_NAV_MODE = 1
	NAV_INS_GPS_INIT UALBERTA_NAV_MODE = 2
	NAV_INS_GPS      UALBERTA_NAV_MODE = 3
)

type UALBERTA_PILOT_MODE int

const (
	PILOT_MANUAL UALBERTA_PILOT_MODE = 0
	PILOT_AUTO   UALBERTA_PILOT_MODE = 1
	PILOT_ROTO   UALBERTA_PILOT_MODE = 2
)

type UAVCAN_NODE_HEALTH int

const (
	UAVCAN_NODE_HEALTH_OK       UAVCAN_NODE_HEALTH = 0
	UAVCAN_NODE_HEALTH_WARNING  UAVCAN_NODE_HEALTH = 1
	UAVCAN_NODE_HEALTH_ERROR    UAVCAN_NODE_HEALTH = 2
	UAVCAN_NODE_HEALTH_CRITICAL UAVCAN_NODE_HEALTH = 3
)

type UAVCAN_NODE_MODE int

const (
	UAVCAN_NODE_MODE_OPERATIONAL     UAVCAN_NODE_MODE = 0
	UAVCAN_NODE_MODE_INITIALIZATION  UAVCAN_NODE_MODE = 1
	UAVCAN_NODE_MODE_MAINTENANCE     UAVCAN_NODE_MODE = 2
	UAVCAN_NODE_MODE_SOFTWARE_UPDATE UAVCAN_NODE_MODE = 3
	UAVCAN_NODE_MODE_OFFLINE         UAVCAN_NODE_MODE = 7
)

type UTM_DATA_AVAIL_FLAGS int

const (
	UTM_DATA_AVAIL_FLAGS_TIME_VALID                  UTM_DATA_AVAIL_FLAGS = 1
	UTM_DATA_AVAIL_FLAGS_UAS_ID_AVAILABLE            UTM_DATA_AVAIL_FLAGS = 2
	UTM_DATA_AVAIL_FLAGS_POSITION_AVAILABLE          UTM_DATA_AVAIL_FLAGS = 4
	UTM_DATA_AVAIL_FLAGS_ALTITUDE_AVAILABLE          UTM_DATA_AVAIL_FLAGS = 8
	UTM_DATA_AVAIL_FLAGS_RELATIVE_ALTITUDE_AVAILABLE UTM_DATA_AVAIL_FLAGS = 16
	UTM_DATA_AVAIL_FLAGS_HORIZONTAL_VELO_AVAILABLE   UTM_DATA_AVAIL_FLAGS = 32
	UTM_DATA_AVAIL_FLAGS_VERTICAL_VELO_AVAILABLE     UTM_DATA_AVAIL_FLAGS = 64
	UTM_DATA_AVAIL_FLAGS_NEXT_WAYPOINT_AVAILABLE     UTM_DATA_AVAIL_FLAGS = 128
)

type UTM_FLIGHT_STATE int

const (
	UTM_FLIGHT_STATE_UNKNOWN   UTM_FLIGHT_STATE = 1
	UTM_FLIGHT_STATE_GROUND    UTM_FLIGHT_STATE = 2
	UTM_FLIGHT_STATE_AIRBORNE  UTM_FLIGHT_STATE = 3
	UTM_FLIGHT_STATE_EMERGENCY UTM_FLIGHT_STATE = 16
	UTM_FLIGHT_STATE_NOCTRL    UTM_FLIGHT_STATE = 32
)

type VIDEO_STREAM_STATUS_FLAGS int

const (
	VIDEO_STREAM_STATUS_FLAGS_RUNNING VIDEO_STREAM_STATUS_FLAGS = 1
	VIDEO_STREAM_STATUS_FLAGS_THERMAL VIDEO_STREAM_STATUS_FLAGS = 2
)

type VIDEO_STREAM_TYPE int

const (
	VIDEO_STREAM_TYPE_RTSP         VIDEO_STREAM_TYPE = 0
	VIDEO_STREAM_TYPE_RTPUDP       VIDEO_STREAM_TYPE = 1
	VIDEO_STREAM_TYPE_TCP_MPEG     VIDEO_STREAM_TYPE = 2
	VIDEO_STREAM_TYPE_MPEG_TS_H264 VIDEO_STREAM_TYPE = 3
)

type VTOL_TRANSITION_HEADING int

const (
	VTOL_TRANSITION_HEADING_VEHICLE_DEFAULT VTOL_TRANSITION_HEADING = 0
	VTOL_TRANSITION_HEADING_NEXT_WAYPOINT   VTOL_TRANSITION_HEADING = 1
	VTOL_TRANSITION_HEADING_TAKEOFF         VTOL_TRANSITION_HEADING = 2
	VTOL_TRANSITION_HEADING_SPECIFIED       VTOL_TRANSITION_HEADING = 3
	VTOL_TRANSITION_HEADING_ANY             VTOL_TRANSITION_HEADING = 4
)
