//autogenerated:yes
//nolint:revive,misspell,govet,lll,dupl,gocritic
package ardupilotmega

import (
	"fmt"
	"strconv"
)

type GIMBAL_AXIS uint32

const (
	// Gimbal yaw axis.
	GIMBAL_AXIS_YAW GIMBAL_AXIS = 0
	// Gimbal pitch axis.
	GIMBAL_AXIS_PITCH GIMBAL_AXIS = 1
	// Gimbal roll axis.
	GIMBAL_AXIS_ROLL GIMBAL_AXIS = 2
)

var labels_GIMBAL_AXIS = map[GIMBAL_AXIS]string{
	GIMBAL_AXIS_YAW:   "GIMBAL_AXIS_YAW",
	GIMBAL_AXIS_PITCH: "GIMBAL_AXIS_PITCH",
	GIMBAL_AXIS_ROLL:  "GIMBAL_AXIS_ROLL",
}

var values_GIMBAL_AXIS = map[string]GIMBAL_AXIS{
	"GIMBAL_AXIS_YAW":   GIMBAL_AXIS_YAW,
	"GIMBAL_AXIS_PITCH": GIMBAL_AXIS_PITCH,
	"GIMBAL_AXIS_ROLL":  GIMBAL_AXIS_ROLL,
}

// MarshalText implements the encoding.TextMarshaler interface.
func (e GIMBAL_AXIS) MarshalText() ([]byte, error) {
	name, ok := labels_GIMBAL_AXIS[e]
	if !ok {
		return nil, fmt.Errorf("invalid value %d", e)
	}
	return []byte(name), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface.
func (e *GIMBAL_AXIS) UnmarshalText(text []byte) error {
	value, ok := values_GIMBAL_AXIS[string(text)]
	if !ok {
		return fmt.Errorf("invalid label '%s'", text)
	}
	*e = value
	return nil
}

// String implements the fmt.Stringer interface.
func (e GIMBAL_AXIS) String() string {
	name, ok := labels_GIMBAL_AXIS[e]
	if !ok {
		return strconv.Itoa(int(e))
	}
	return name
}
