//autogenerated:yes
//nolint:revive,misspell,govet,lll,dupl,gocritic
package ardupilotmega

import (
	"fmt"
	"strconv"
)

type GOPRO_FIELD_OF_VIEW uint32

const (
	// 0x00: Wide.
	GOPRO_FIELD_OF_VIEW_WIDE GOPRO_FIELD_OF_VIEW = 0
	// 0x01: Medium.
	GOPRO_FIELD_OF_VIEW_MEDIUM GOPRO_FIELD_OF_VIEW = 1
	// 0x02: Narrow.
	GOPRO_FIELD_OF_VIEW_NARROW GOPRO_FIELD_OF_VIEW = 2
)

var labels_GOPRO_FIELD_OF_VIEW = map[GOPRO_FIELD_OF_VIEW]string{
	GOPRO_FIELD_OF_VIEW_WIDE:   "GOPRO_FIELD_OF_VIEW_WIDE",
	GOPRO_FIELD_OF_VIEW_MEDIUM: "GOPRO_FIELD_OF_VIEW_MEDIUM",
	GOPRO_FIELD_OF_VIEW_NARROW: "GOPRO_FIELD_OF_VIEW_NARROW",
}

var values_GOPRO_FIELD_OF_VIEW = map[string]GOPRO_FIELD_OF_VIEW{
	"GOPRO_FIELD_OF_VIEW_WIDE":   GOPRO_FIELD_OF_VIEW_WIDE,
	"GOPRO_FIELD_OF_VIEW_MEDIUM": GOPRO_FIELD_OF_VIEW_MEDIUM,
	"GOPRO_FIELD_OF_VIEW_NARROW": GOPRO_FIELD_OF_VIEW_NARROW,
}

// MarshalText implements the encoding.TextMarshaler interface.
func (e GOPRO_FIELD_OF_VIEW) MarshalText() ([]byte, error) {
	name, ok := labels_GOPRO_FIELD_OF_VIEW[e]
	if !ok {
		return nil, fmt.Errorf("invalid value %d", e)
	}
	return []byte(name), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface.
func (e *GOPRO_FIELD_OF_VIEW) UnmarshalText(text []byte) error {
	value, ok := values_GOPRO_FIELD_OF_VIEW[string(text)]
	if !ok {
		return fmt.Errorf("invalid label '%s'", text)
	}
	*e = value
	return nil
}

// String implements the fmt.Stringer interface.
func (e GOPRO_FIELD_OF_VIEW) String() string {
	name, ok := labels_GOPRO_FIELD_OF_VIEW[e]
	if !ok {
		return strconv.Itoa(int(e))
	}
	return name
}
