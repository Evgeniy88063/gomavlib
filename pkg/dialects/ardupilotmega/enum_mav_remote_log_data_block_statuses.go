//autogenerated:yes
//nolint:revive,misspell,govet,lll,dupl,gocritic
package ardupilotmega

import (
	"fmt"
	"strconv"
)

// Possible remote log data block statuses.
type MAV_REMOTE_LOG_DATA_BLOCK_STATUSES uint32

const (
	// This block has NOT been received.
	MAV_REMOTE_LOG_DATA_BLOCK_NACK MAV_REMOTE_LOG_DATA_BLOCK_STATUSES = 0
	// This block has been received.
	MAV_REMOTE_LOG_DATA_BLOCK_ACK MAV_REMOTE_LOG_DATA_BLOCK_STATUSES = 1
)

var labels_MAV_REMOTE_LOG_DATA_BLOCK_STATUSES = map[MAV_REMOTE_LOG_DATA_BLOCK_STATUSES]string{
	MAV_REMOTE_LOG_DATA_BLOCK_NACK: "MAV_REMOTE_LOG_DATA_BLOCK_NACK",
	MAV_REMOTE_LOG_DATA_BLOCK_ACK:  "MAV_REMOTE_LOG_DATA_BLOCK_ACK",
}

var values_MAV_REMOTE_LOG_DATA_BLOCK_STATUSES = map[string]MAV_REMOTE_LOG_DATA_BLOCK_STATUSES{
	"MAV_REMOTE_LOG_DATA_BLOCK_NACK": MAV_REMOTE_LOG_DATA_BLOCK_NACK,
	"MAV_REMOTE_LOG_DATA_BLOCK_ACK":  MAV_REMOTE_LOG_DATA_BLOCK_ACK,
}

// MarshalText implements the encoding.TextMarshaler interface.
func (e MAV_REMOTE_LOG_DATA_BLOCK_STATUSES) MarshalText() ([]byte, error) {
	name, ok := labels_MAV_REMOTE_LOG_DATA_BLOCK_STATUSES[e]
	if !ok {
		return nil, fmt.Errorf("invalid value %d", e)
	}
	return []byte(name), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface.
func (e *MAV_REMOTE_LOG_DATA_BLOCK_STATUSES) UnmarshalText(text []byte) error {
	value, ok := values_MAV_REMOTE_LOG_DATA_BLOCK_STATUSES[string(text)]
	if !ok {
		return fmt.Errorf("invalid label '%s'", text)
	}
	*e = value
	return nil
}

// String implements the fmt.Stringer interface.
func (e MAV_REMOTE_LOG_DATA_BLOCK_STATUSES) String() string {
	name, ok := labels_MAV_REMOTE_LOG_DATA_BLOCK_STATUSES[e]
	if !ok {
		return strconv.Itoa(int(e))
	}
	return name
}
