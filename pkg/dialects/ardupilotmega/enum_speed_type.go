//autogenerated:yes
//nolint:revive,misspell,govet,lll,dupl,gocritic
package ardupilotmega

import (
	"fmt"
	"strconv"
)

type SPEED_TYPE uint32

const (
	SPEED_TYPE_AIRSPEED    SPEED_TYPE = 0
	SPEED_TYPE_GROUNDSPEED SPEED_TYPE = 1
)

var labels_SPEED_TYPE = map[SPEED_TYPE]string{
	SPEED_TYPE_AIRSPEED:    "SPEED_TYPE_AIRSPEED",
	SPEED_TYPE_GROUNDSPEED: "SPEED_TYPE_GROUNDSPEED",
}

var values_SPEED_TYPE = map[string]SPEED_TYPE{
	"SPEED_TYPE_AIRSPEED":    SPEED_TYPE_AIRSPEED,
	"SPEED_TYPE_GROUNDSPEED": SPEED_TYPE_GROUNDSPEED,
}

// MarshalText implements the encoding.TextMarshaler interface.
func (e SPEED_TYPE) MarshalText() ([]byte, error) {
	name, ok := labels_SPEED_TYPE[e]
	if !ok {
		return nil, fmt.Errorf("invalid value %d", e)
	}
	return []byte(name), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface.
func (e *SPEED_TYPE) UnmarshalText(text []byte) error {
	value, ok := values_SPEED_TYPE[string(text)]
	if !ok {
		return fmt.Errorf("invalid label '%s'", text)
	}
	*e = value
	return nil
}

// String implements the fmt.Stringer interface.
func (e SPEED_TYPE) String() string {
	name, ok := labels_SPEED_TYPE[e]
	if !ok {
		return strconv.Itoa(int(e))
	}
	return name
}
