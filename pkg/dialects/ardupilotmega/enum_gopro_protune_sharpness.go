//autogenerated:yes
//nolint:revive,misspell,govet,lll,dupl,gocritic
package ardupilotmega

import (
	"fmt"
	"strconv"
)

type GOPRO_PROTUNE_SHARPNESS uint32

const (
	// Low Sharpness.
	GOPRO_PROTUNE_SHARPNESS_LOW GOPRO_PROTUNE_SHARPNESS = 0
	// Medium Sharpness.
	GOPRO_PROTUNE_SHARPNESS_MEDIUM GOPRO_PROTUNE_SHARPNESS = 1
	// High Sharpness.
	GOPRO_PROTUNE_SHARPNESS_HIGH GOPRO_PROTUNE_SHARPNESS = 2
)

var labels_GOPRO_PROTUNE_SHARPNESS = map[GOPRO_PROTUNE_SHARPNESS]string{
	GOPRO_PROTUNE_SHARPNESS_LOW:    "GOPRO_PROTUNE_SHARPNESS_LOW",
	GOPRO_PROTUNE_SHARPNESS_MEDIUM: "GOPRO_PROTUNE_SHARPNESS_MEDIUM",
	GOPRO_PROTUNE_SHARPNESS_HIGH:   "GOPRO_PROTUNE_SHARPNESS_HIGH",
}

var values_GOPRO_PROTUNE_SHARPNESS = map[string]GOPRO_PROTUNE_SHARPNESS{
	"GOPRO_PROTUNE_SHARPNESS_LOW":    GOPRO_PROTUNE_SHARPNESS_LOW,
	"GOPRO_PROTUNE_SHARPNESS_MEDIUM": GOPRO_PROTUNE_SHARPNESS_MEDIUM,
	"GOPRO_PROTUNE_SHARPNESS_HIGH":   GOPRO_PROTUNE_SHARPNESS_HIGH,
}

// MarshalText implements the encoding.TextMarshaler interface.
func (e GOPRO_PROTUNE_SHARPNESS) MarshalText() ([]byte, error) {
	name, ok := labels_GOPRO_PROTUNE_SHARPNESS[e]
	if !ok {
		return nil, fmt.Errorf("invalid value %d", e)
	}
	return []byte(name), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface.
func (e *GOPRO_PROTUNE_SHARPNESS) UnmarshalText(text []byte) error {
	value, ok := values_GOPRO_PROTUNE_SHARPNESS[string(text)]
	if !ok {
		return fmt.Errorf("invalid label '%s'", text)
	}
	*e = value
	return nil
}

// String implements the fmt.Stringer interface.
func (e GOPRO_PROTUNE_SHARPNESS) String() string {
	name, ok := labels_GOPRO_PROTUNE_SHARPNESS[e]
	if !ok {
		return strconv.Itoa(int(e))
	}
	return name
}
