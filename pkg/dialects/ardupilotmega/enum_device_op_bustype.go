//autogenerated:yes
//nolint:revive,misspell,govet,lll,dupl,gocritic
package ardupilotmega

import (
	"fmt"
	"strconv"
)

// Bus types for device operations.
type DEVICE_OP_BUSTYPE uint32

const (
	// I2C Device operation.
	DEVICE_OP_BUSTYPE_I2C DEVICE_OP_BUSTYPE = 0
	// SPI Device operation.
	DEVICE_OP_BUSTYPE_SPI DEVICE_OP_BUSTYPE = 1
)

var labels_DEVICE_OP_BUSTYPE = map[DEVICE_OP_BUSTYPE]string{
	DEVICE_OP_BUSTYPE_I2C: "DEVICE_OP_BUSTYPE_I2C",
	DEVICE_OP_BUSTYPE_SPI: "DEVICE_OP_BUSTYPE_SPI",
}

var values_DEVICE_OP_BUSTYPE = map[string]DEVICE_OP_BUSTYPE{
	"DEVICE_OP_BUSTYPE_I2C": DEVICE_OP_BUSTYPE_I2C,
	"DEVICE_OP_BUSTYPE_SPI": DEVICE_OP_BUSTYPE_SPI,
}

// MarshalText implements the encoding.TextMarshaler interface.
func (e DEVICE_OP_BUSTYPE) MarshalText() ([]byte, error) {
	name, ok := labels_DEVICE_OP_BUSTYPE[e]
	if !ok {
		return nil, fmt.Errorf("invalid value %d", e)
	}
	return []byte(name), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface.
func (e *DEVICE_OP_BUSTYPE) UnmarshalText(text []byte) error {
	value, ok := values_DEVICE_OP_BUSTYPE[string(text)]
	if !ok {
		return fmt.Errorf("invalid label '%s'", text)
	}
	*e = value
	return nil
}

// String implements the fmt.Stringer interface.
func (e DEVICE_OP_BUSTYPE) String() string {
	name, ok := labels_DEVICE_OP_BUSTYPE[e]
	if !ok {
		return strconv.Itoa(int(e))
	}
	return name
}
