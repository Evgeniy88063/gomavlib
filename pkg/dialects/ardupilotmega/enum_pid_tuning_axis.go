//autogenerated:yes
//nolint:revive,misspell,govet,lll,dupl,gocritic
package ardupilotmega

import (
	"fmt"
	"strconv"
)

type PID_TUNING_AXIS uint32

const (
	PID_TUNING_ROLL    PID_TUNING_AXIS = 1
	PID_TUNING_PITCH   PID_TUNING_AXIS = 2
	PID_TUNING_YAW     PID_TUNING_AXIS = 3
	PID_TUNING_ACCZ    PID_TUNING_AXIS = 4
	PID_TUNING_STEER   PID_TUNING_AXIS = 5
	PID_TUNING_LANDING PID_TUNING_AXIS = 6
)

var labels_PID_TUNING_AXIS = map[PID_TUNING_AXIS]string{
	PID_TUNING_ROLL:    "PID_TUNING_ROLL",
	PID_TUNING_PITCH:   "PID_TUNING_PITCH",
	PID_TUNING_YAW:     "PID_TUNING_YAW",
	PID_TUNING_ACCZ:    "PID_TUNING_ACCZ",
	PID_TUNING_STEER:   "PID_TUNING_STEER",
	PID_TUNING_LANDING: "PID_TUNING_LANDING",
}

var values_PID_TUNING_AXIS = map[string]PID_TUNING_AXIS{
	"PID_TUNING_ROLL":    PID_TUNING_ROLL,
	"PID_TUNING_PITCH":   PID_TUNING_PITCH,
	"PID_TUNING_YAW":     PID_TUNING_YAW,
	"PID_TUNING_ACCZ":    PID_TUNING_ACCZ,
	"PID_TUNING_STEER":   PID_TUNING_STEER,
	"PID_TUNING_LANDING": PID_TUNING_LANDING,
}

// MarshalText implements the encoding.TextMarshaler interface.
func (e PID_TUNING_AXIS) MarshalText() ([]byte, error) {
	name, ok := labels_PID_TUNING_AXIS[e]
	if !ok {
		return nil, fmt.Errorf("invalid value %d", e)
	}
	return []byte(name), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface.
func (e *PID_TUNING_AXIS) UnmarshalText(text []byte) error {
	value, ok := values_PID_TUNING_AXIS[string(text)]
	if !ok {
		return fmt.Errorf("invalid label '%s'", text)
	}
	*e = value
	return nil
}

// String implements the fmt.Stringer interface.
func (e PID_TUNING_AXIS) String() string {
	name, ok := labels_PID_TUNING_AXIS[e]
	if !ok {
		return strconv.Itoa(int(e))
	}
	return name
}
