//autogenerated:yes
//nolint:golint,misspell,govet,lll,dupl
package ardupilotmega

import (
	"errors"
)

type GOPRO_PROTUNE_WHITE_BALANCE int

const (
	// Auto.
	GOPRO_PROTUNE_WHITE_BALANCE_AUTO GOPRO_PROTUNE_WHITE_BALANCE = 0
	// 3000K.
	GOPRO_PROTUNE_WHITE_BALANCE_3000K GOPRO_PROTUNE_WHITE_BALANCE = 1
	// 5500K.
	GOPRO_PROTUNE_WHITE_BALANCE_5500K GOPRO_PROTUNE_WHITE_BALANCE = 2
	// 6500K.
	GOPRO_PROTUNE_WHITE_BALANCE_6500K GOPRO_PROTUNE_WHITE_BALANCE = 3
	// Camera Raw.
	GOPRO_PROTUNE_WHITE_BALANCE_RAW GOPRO_PROTUNE_WHITE_BALANCE = 4
)

var labels_GOPRO_PROTUNE_WHITE_BALANCE = map[GOPRO_PROTUNE_WHITE_BALANCE]string{}

// MarshalText implements the encoding.TextMarshaler interface.
func (e GOPRO_PROTUNE_WHITE_BALANCE) MarshalText() ([]byte, error) {
	if l, ok := labels_GOPRO_PROTUNE_WHITE_BALANCE[e]; ok {
		return []byte(l), nil
	}
	return nil, errors.New("invalid value")
}

var reverseLabels_GOPRO_PROTUNE_WHITE_BALANCE = map[string]GOPRO_PROTUNE_WHITE_BALANCE{}

// UnmarshalText implements the encoding.TextUnmarshaler interface.
func (e *GOPRO_PROTUNE_WHITE_BALANCE) UnmarshalText(text []byte) error {
	if rl, ok := reverseLabels_GOPRO_PROTUNE_WHITE_BALANCE[string(text)]; ok {
		*e = rl
		return nil
	}
	return errors.New("invalid value")
}

// String implements the fmt.Stringer interface.
func (e GOPRO_PROTUNE_WHITE_BALANCE) String() string {
	if l, ok := labels_GOPRO_PROTUNE_WHITE_BALANCE[e]; ok {
		return l
	}
	return "invalid value"
}
