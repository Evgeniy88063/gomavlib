//autogenerated:yes
//nolint:revive,misspell,govet,lll,dupl,gocritic
package common

import (
	"fmt"
	"strconv"
)

type MAV_ODID_OPERATOR_ID_TYPE uint32

const (
	// CAA (Civil Aviation Authority) registered operator ID.
	MAV_ODID_OPERATOR_ID_TYPE_CAA MAV_ODID_OPERATOR_ID_TYPE = 0
)

var labels_MAV_ODID_OPERATOR_ID_TYPE = map[MAV_ODID_OPERATOR_ID_TYPE]string{
	MAV_ODID_OPERATOR_ID_TYPE_CAA: "MAV_ODID_OPERATOR_ID_TYPE_CAA",
}

var values_MAV_ODID_OPERATOR_ID_TYPE = map[string]MAV_ODID_OPERATOR_ID_TYPE{
	"MAV_ODID_OPERATOR_ID_TYPE_CAA": MAV_ODID_OPERATOR_ID_TYPE_CAA,
}

// MarshalText implements the encoding.TextMarshaler interface.
func (e MAV_ODID_OPERATOR_ID_TYPE) MarshalText() ([]byte, error) {
	name, ok := labels_MAV_ODID_OPERATOR_ID_TYPE[e]
	if !ok {
		return nil, fmt.Errorf("invalid value %d", e)
	}
	return []byte(name), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface.
func (e *MAV_ODID_OPERATOR_ID_TYPE) UnmarshalText(text []byte) error {
	value, ok := values_MAV_ODID_OPERATOR_ID_TYPE[string(text)]
	if !ok {
		return fmt.Errorf("invalid label '%s'", text)
	}
	*e = value
	return nil
}

// String implements the fmt.Stringer interface.
func (e MAV_ODID_OPERATOR_ID_TYPE) String() string {
	name, ok := labels_MAV_ODID_OPERATOR_ID_TYPE[e]
	if !ok {
		return strconv.Itoa(int(e))
	}
	return name
}
