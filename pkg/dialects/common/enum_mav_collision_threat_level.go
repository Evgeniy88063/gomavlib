//autogenerated:yes
//nolint:revive,misspell,govet,lll,dupl,gocritic
package common

import (
	"fmt"
	"strconv"
)

// Aircraft-rated danger from this threat.
type MAV_COLLISION_THREAT_LEVEL uint32

const (
	// Not a threat
	MAV_COLLISION_THREAT_LEVEL_NONE MAV_COLLISION_THREAT_LEVEL = 0
	// Craft is mildly concerned about this threat
	MAV_COLLISION_THREAT_LEVEL_LOW MAV_COLLISION_THREAT_LEVEL = 1
	// Craft is panicking, and may take actions to avoid threat
	MAV_COLLISION_THREAT_LEVEL_HIGH MAV_COLLISION_THREAT_LEVEL = 2
)

var labels_MAV_COLLISION_THREAT_LEVEL = map[MAV_COLLISION_THREAT_LEVEL]string{
	MAV_COLLISION_THREAT_LEVEL_NONE: "MAV_COLLISION_THREAT_LEVEL_NONE",
	MAV_COLLISION_THREAT_LEVEL_LOW:  "MAV_COLLISION_THREAT_LEVEL_LOW",
	MAV_COLLISION_THREAT_LEVEL_HIGH: "MAV_COLLISION_THREAT_LEVEL_HIGH",
}

var values_MAV_COLLISION_THREAT_LEVEL = map[string]MAV_COLLISION_THREAT_LEVEL{
	"MAV_COLLISION_THREAT_LEVEL_NONE": MAV_COLLISION_THREAT_LEVEL_NONE,
	"MAV_COLLISION_THREAT_LEVEL_LOW":  MAV_COLLISION_THREAT_LEVEL_LOW,
	"MAV_COLLISION_THREAT_LEVEL_HIGH": MAV_COLLISION_THREAT_LEVEL_HIGH,
}

// MarshalText implements the encoding.TextMarshaler interface.
func (e MAV_COLLISION_THREAT_LEVEL) MarshalText() ([]byte, error) {
	name, ok := labels_MAV_COLLISION_THREAT_LEVEL[e]
	if !ok {
		return nil, fmt.Errorf("invalid value %d", e)
	}
	return []byte(name), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface.
func (e *MAV_COLLISION_THREAT_LEVEL) UnmarshalText(text []byte) error {
	value, ok := values_MAV_COLLISION_THREAT_LEVEL[string(text)]
	if !ok {
		return fmt.Errorf("invalid label '%s'", text)
	}
	*e = value
	return nil
}

// String implements the fmt.Stringer interface.
func (e MAV_COLLISION_THREAT_LEVEL) String() string {
	name, ok := labels_MAV_COLLISION_THREAT_LEVEL[e]
	if !ok {
		return strconv.Itoa(int(e))
	}
	return name
}
