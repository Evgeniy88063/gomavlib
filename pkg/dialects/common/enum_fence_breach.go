//autogenerated:yes
//nolint:revive,misspell,govet,lll,dupl,gocritic
package common

import (
	"fmt"
	"strconv"
)

type FENCE_BREACH uint32

const (
	// No last fence breach
	FENCE_BREACH_NONE FENCE_BREACH = 0
	// Breached minimum altitude
	FENCE_BREACH_MINALT FENCE_BREACH = 1
	// Breached maximum altitude
	FENCE_BREACH_MAXALT FENCE_BREACH = 2
	// Breached fence boundary
	FENCE_BREACH_BOUNDARY FENCE_BREACH = 3
)

var labels_FENCE_BREACH = map[FENCE_BREACH]string{
	FENCE_BREACH_NONE:     "FENCE_BREACH_NONE",
	FENCE_BREACH_MINALT:   "FENCE_BREACH_MINALT",
	FENCE_BREACH_MAXALT:   "FENCE_BREACH_MAXALT",
	FENCE_BREACH_BOUNDARY: "FENCE_BREACH_BOUNDARY",
}

var values_FENCE_BREACH = map[string]FENCE_BREACH{
	"FENCE_BREACH_NONE":     FENCE_BREACH_NONE,
	"FENCE_BREACH_MINALT":   FENCE_BREACH_MINALT,
	"FENCE_BREACH_MAXALT":   FENCE_BREACH_MAXALT,
	"FENCE_BREACH_BOUNDARY": FENCE_BREACH_BOUNDARY,
}

// MarshalText implements the encoding.TextMarshaler interface.
func (e FENCE_BREACH) MarshalText() ([]byte, error) {
	name, ok := labels_FENCE_BREACH[e]
	if !ok {
		return nil, fmt.Errorf("invalid value %d", e)
	}
	return []byte(name), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface.
func (e *FENCE_BREACH) UnmarshalText(text []byte) error {
	value, ok := values_FENCE_BREACH[string(text)]
	if !ok {
		return fmt.Errorf("invalid label '%s'", text)
	}
	*e = value
	return nil
}

// String implements the fmt.Stringer interface.
func (e FENCE_BREACH) String() string {
	name, ok := labels_FENCE_BREACH[e]
	if !ok {
		return strconv.Itoa(int(e))
	}
	return name
}
