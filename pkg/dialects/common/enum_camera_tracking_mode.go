//autogenerated:yes
//nolint:revive,misspell,govet,lll,dupl,gocritic
package common

import (
	"fmt"
	"strconv"
)

// Camera tracking modes
type CAMERA_TRACKING_MODE uint32

const (
	// Not tracking
	CAMERA_TRACKING_MODE_NONE CAMERA_TRACKING_MODE = 0
	// Target is a point
	CAMERA_TRACKING_MODE_POINT CAMERA_TRACKING_MODE = 1
	// Target is a rectangle
	CAMERA_TRACKING_MODE_RECTANGLE CAMERA_TRACKING_MODE = 2
)

var labels_CAMERA_TRACKING_MODE = map[CAMERA_TRACKING_MODE]string{
	CAMERA_TRACKING_MODE_NONE:      "CAMERA_TRACKING_MODE_NONE",
	CAMERA_TRACKING_MODE_POINT:     "CAMERA_TRACKING_MODE_POINT",
	CAMERA_TRACKING_MODE_RECTANGLE: "CAMERA_TRACKING_MODE_RECTANGLE",
}

var values_CAMERA_TRACKING_MODE = map[string]CAMERA_TRACKING_MODE{
	"CAMERA_TRACKING_MODE_NONE":      CAMERA_TRACKING_MODE_NONE,
	"CAMERA_TRACKING_MODE_POINT":     CAMERA_TRACKING_MODE_POINT,
	"CAMERA_TRACKING_MODE_RECTANGLE": CAMERA_TRACKING_MODE_RECTANGLE,
}

// MarshalText implements the encoding.TextMarshaler interface.
func (e CAMERA_TRACKING_MODE) MarshalText() ([]byte, error) {
	name, ok := labels_CAMERA_TRACKING_MODE[e]
	if !ok {
		return nil, fmt.Errorf("invalid value %d", e)
	}
	return []byte(name), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface.
func (e *CAMERA_TRACKING_MODE) UnmarshalText(text []byte) error {
	value, ok := values_CAMERA_TRACKING_MODE[string(text)]
	if !ok {
		return fmt.Errorf("invalid label '%s'", text)
	}
	*e = value
	return nil
}

// String implements the fmt.Stringer interface.
func (e CAMERA_TRACKING_MODE) String() string {
	name, ok := labels_CAMERA_TRACKING_MODE[e]
	if !ok {
		return strconv.Itoa(int(e))
	}
	return name
}
