//autogenerated:yes
//nolint:revive,misspell,govet,lll,dupl,gocritic
package common

import (
	"fmt"
	"strconv"
)

type MAV_ODID_HEIGHT_REF uint32

const (
	// The height field is relative to the take-off location.
	MAV_ODID_HEIGHT_REF_OVER_TAKEOFF MAV_ODID_HEIGHT_REF = 0
	// The height field is relative to ground.
	MAV_ODID_HEIGHT_REF_OVER_GROUND MAV_ODID_HEIGHT_REF = 1
)

var labels_MAV_ODID_HEIGHT_REF = map[MAV_ODID_HEIGHT_REF]string{
	MAV_ODID_HEIGHT_REF_OVER_TAKEOFF: "MAV_ODID_HEIGHT_REF_OVER_TAKEOFF",
	MAV_ODID_HEIGHT_REF_OVER_GROUND:  "MAV_ODID_HEIGHT_REF_OVER_GROUND",
}

var values_MAV_ODID_HEIGHT_REF = map[string]MAV_ODID_HEIGHT_REF{
	"MAV_ODID_HEIGHT_REF_OVER_TAKEOFF": MAV_ODID_HEIGHT_REF_OVER_TAKEOFF,
	"MAV_ODID_HEIGHT_REF_OVER_GROUND":  MAV_ODID_HEIGHT_REF_OVER_GROUND,
}

// MarshalText implements the encoding.TextMarshaler interface.
func (e MAV_ODID_HEIGHT_REF) MarshalText() ([]byte, error) {
	name, ok := labels_MAV_ODID_HEIGHT_REF[e]
	if !ok {
		return nil, fmt.Errorf("invalid value %d", e)
	}
	return []byte(name), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface.
func (e *MAV_ODID_HEIGHT_REF) UnmarshalText(text []byte) error {
	value, ok := values_MAV_ODID_HEIGHT_REF[string(text)]
	if !ok {
		return fmt.Errorf("invalid label '%s'", text)
	}
	*e = value
	return nil
}

// String implements the fmt.Stringer interface.
func (e MAV_ODID_HEIGHT_REF) String() string {
	name, ok := labels_MAV_ODID_HEIGHT_REF[e]
	if !ok {
		return strconv.Itoa(int(e))
	}
	return name
}
