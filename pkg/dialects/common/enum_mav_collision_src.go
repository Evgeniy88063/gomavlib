//autogenerated:yes
//nolint:revive,misspell,govet,lll,dupl,gocritic
package common

import (
	"fmt"
	"strconv"
)

// Source of information about this collision.
type MAV_COLLISION_SRC uint32

const (
	// ID field references ADSB_VEHICLE packets
	MAV_COLLISION_SRC_ADSB MAV_COLLISION_SRC = 0
	// ID field references MAVLink SRC ID
	MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT MAV_COLLISION_SRC = 1
)

var labels_MAV_COLLISION_SRC = map[MAV_COLLISION_SRC]string{
	MAV_COLLISION_SRC_ADSB:                   "MAV_COLLISION_SRC_ADSB",
	MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT: "MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT",
}

var values_MAV_COLLISION_SRC = map[string]MAV_COLLISION_SRC{
	"MAV_COLLISION_SRC_ADSB":                   MAV_COLLISION_SRC_ADSB,
	"MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT": MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT,
}

// MarshalText implements the encoding.TextMarshaler interface.
func (e MAV_COLLISION_SRC) MarshalText() ([]byte, error) {
	name, ok := labels_MAV_COLLISION_SRC[e]
	if !ok {
		return nil, fmt.Errorf("invalid value %d", e)
	}
	return []byte(name), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface.
func (e *MAV_COLLISION_SRC) UnmarshalText(text []byte) error {
	value, ok := values_MAV_COLLISION_SRC[string(text)]
	if !ok {
		return fmt.Errorf("invalid label '%s'", text)
	}
	*e = value
	return nil
}

// String implements the fmt.Stringer interface.
func (e MAV_COLLISION_SRC) String() string {
	name, ok := labels_MAV_COLLISION_SRC[e]
	if !ok {
		return strconv.Itoa(int(e))
	}
	return name
}
