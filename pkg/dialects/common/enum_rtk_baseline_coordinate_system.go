//autogenerated:yes
//nolint:revive,misspell,govet,lll,dupl,gocritic
package common

import (
	"fmt"
	"strconv"
)

// RTK GPS baseline coordinate system, used for RTK corrections
type RTK_BASELINE_COORDINATE_SYSTEM uint32

const (
	// Earth-centered, Earth-fixed
	RTK_BASELINE_COORDINATE_SYSTEM_ECEF RTK_BASELINE_COORDINATE_SYSTEM = 0
	// RTK basestation centered, north, east, down
	RTK_BASELINE_COORDINATE_SYSTEM_NED RTK_BASELINE_COORDINATE_SYSTEM = 1
)

var labels_RTK_BASELINE_COORDINATE_SYSTEM = map[RTK_BASELINE_COORDINATE_SYSTEM]string{
	RTK_BASELINE_COORDINATE_SYSTEM_ECEF: "RTK_BASELINE_COORDINATE_SYSTEM_ECEF",
	RTK_BASELINE_COORDINATE_SYSTEM_NED:  "RTK_BASELINE_COORDINATE_SYSTEM_NED",
}

var values_RTK_BASELINE_COORDINATE_SYSTEM = map[string]RTK_BASELINE_COORDINATE_SYSTEM{
	"RTK_BASELINE_COORDINATE_SYSTEM_ECEF": RTK_BASELINE_COORDINATE_SYSTEM_ECEF,
	"RTK_BASELINE_COORDINATE_SYSTEM_NED":  RTK_BASELINE_COORDINATE_SYSTEM_NED,
}

// MarshalText implements the encoding.TextMarshaler interface.
func (e RTK_BASELINE_COORDINATE_SYSTEM) MarshalText() ([]byte, error) {
	name, ok := labels_RTK_BASELINE_COORDINATE_SYSTEM[e]
	if !ok {
		return nil, fmt.Errorf("invalid value %d", e)
	}
	return []byte(name), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface.
func (e *RTK_BASELINE_COORDINATE_SYSTEM) UnmarshalText(text []byte) error {
	value, ok := values_RTK_BASELINE_COORDINATE_SYSTEM[string(text)]
	if !ok {
		return fmt.Errorf("invalid label '%s'", text)
	}
	*e = value
	return nil
}

// String implements the fmt.Stringer interface.
func (e RTK_BASELINE_COORDINATE_SYSTEM) String() string {
	name, ok := labels_RTK_BASELINE_COORDINATE_SYSTEM[e]
	if !ok {
		return strconv.Itoa(int(e))
	}
	return name
}
