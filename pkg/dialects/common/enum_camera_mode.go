//autogenerated:yes
//nolint:revive,misspell,govet,lll,dupl,gocritic
package common

import (
	"fmt"
	"strconv"
)

// Camera Modes.
type CAMERA_MODE uint32

const (
	// Camera is in image/photo capture mode.
	CAMERA_MODE_IMAGE CAMERA_MODE = 0
	// Camera is in video capture mode.
	CAMERA_MODE_VIDEO CAMERA_MODE = 1
	// Camera is in image survey capture mode. It allows for camera controller to do specific settings for surveys.
	CAMERA_MODE_IMAGE_SURVEY CAMERA_MODE = 2
)

var labels_CAMERA_MODE = map[CAMERA_MODE]string{
	CAMERA_MODE_IMAGE:        "CAMERA_MODE_IMAGE",
	CAMERA_MODE_VIDEO:        "CAMERA_MODE_VIDEO",
	CAMERA_MODE_IMAGE_SURVEY: "CAMERA_MODE_IMAGE_SURVEY",
}

var values_CAMERA_MODE = map[string]CAMERA_MODE{
	"CAMERA_MODE_IMAGE":        CAMERA_MODE_IMAGE,
	"CAMERA_MODE_VIDEO":        CAMERA_MODE_VIDEO,
	"CAMERA_MODE_IMAGE_SURVEY": CAMERA_MODE_IMAGE_SURVEY,
}

// MarshalText implements the encoding.TextMarshaler interface.
func (e CAMERA_MODE) MarshalText() ([]byte, error) {
	name, ok := labels_CAMERA_MODE[e]
	if !ok {
		return nil, fmt.Errorf("invalid value %d", e)
	}
	return []byte(name), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface.
func (e *CAMERA_MODE) UnmarshalText(text []byte) error {
	value, ok := values_CAMERA_MODE[string(text)]
	if !ok {
		return fmt.Errorf("invalid label '%s'", text)
	}
	*e = value
	return nil
}

// String implements the fmt.Stringer interface.
func (e CAMERA_MODE) String() string {
	name, ok := labels_CAMERA_MODE[e]
	if !ok {
		return strconv.Itoa(int(e))
	}
	return name
}
