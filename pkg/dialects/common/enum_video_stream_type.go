//autogenerated:yes
//nolint:revive,misspell,govet,lll,dupl,gocritic
package common

import (
	"fmt"
	"strconv"
)

// Video stream types
type VIDEO_STREAM_TYPE uint32

const (
	// Stream is RTSP
	VIDEO_STREAM_TYPE_RTSP VIDEO_STREAM_TYPE = 0
	// Stream is RTP UDP (URI gives the port number)
	VIDEO_STREAM_TYPE_RTPUDP VIDEO_STREAM_TYPE = 1
	// Stream is MPEG on TCP
	VIDEO_STREAM_TYPE_TCP_MPEG VIDEO_STREAM_TYPE = 2
	// Stream is h.264 on MPEG TS (URI gives the port number)
	VIDEO_STREAM_TYPE_MPEG_TS_H264 VIDEO_STREAM_TYPE = 3
)

var labels_VIDEO_STREAM_TYPE = map[VIDEO_STREAM_TYPE]string{
	VIDEO_STREAM_TYPE_RTSP:         "VIDEO_STREAM_TYPE_RTSP",
	VIDEO_STREAM_TYPE_RTPUDP:       "VIDEO_STREAM_TYPE_RTPUDP",
	VIDEO_STREAM_TYPE_TCP_MPEG:     "VIDEO_STREAM_TYPE_TCP_MPEG",
	VIDEO_STREAM_TYPE_MPEG_TS_H264: "VIDEO_STREAM_TYPE_MPEG_TS_H264",
}

var values_VIDEO_STREAM_TYPE = map[string]VIDEO_STREAM_TYPE{
	"VIDEO_STREAM_TYPE_RTSP":         VIDEO_STREAM_TYPE_RTSP,
	"VIDEO_STREAM_TYPE_RTPUDP":       VIDEO_STREAM_TYPE_RTPUDP,
	"VIDEO_STREAM_TYPE_TCP_MPEG":     VIDEO_STREAM_TYPE_TCP_MPEG,
	"VIDEO_STREAM_TYPE_MPEG_TS_H264": VIDEO_STREAM_TYPE_MPEG_TS_H264,
}

// MarshalText implements the encoding.TextMarshaler interface.
func (e VIDEO_STREAM_TYPE) MarshalText() ([]byte, error) {
	name, ok := labels_VIDEO_STREAM_TYPE[e]
	if !ok {
		return nil, fmt.Errorf("invalid value %d", e)
	}
	return []byte(name), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface.
func (e *VIDEO_STREAM_TYPE) UnmarshalText(text []byte) error {
	value, ok := values_VIDEO_STREAM_TYPE[string(text)]
	if !ok {
		return fmt.Errorf("invalid label '%s'", text)
	}
	*e = value
	return nil
}

// String implements the fmt.Stringer interface.
func (e VIDEO_STREAM_TYPE) String() string {
	name, ok := labels_VIDEO_STREAM_TYPE[e]
	if !ok {
		return strconv.Itoa(int(e))
	}
	return name
}
