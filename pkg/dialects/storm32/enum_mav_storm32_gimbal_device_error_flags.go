//autogenerated:yes
//nolint:revive,misspell,govet,lll,dupl
package storm32

import (
	"errors"
)

// Gimbal device error and condition flags (0 means no error or other condition).
type MAV_STORM32_GIMBAL_DEVICE_ERROR_FLAGS uint32

const (
	// Gimbal device is limited by hardware roll limit.
	MAV_STORM32_GIMBAL_DEVICE_ERROR_FLAGS_AT_ROLL_LIMIT MAV_STORM32_GIMBAL_DEVICE_ERROR_FLAGS = 1
	// Gimbal device is limited by hardware pitch limit.
	MAV_STORM32_GIMBAL_DEVICE_ERROR_FLAGS_AT_PITCH_LIMIT MAV_STORM32_GIMBAL_DEVICE_ERROR_FLAGS = 2
	// Gimbal device is limited by hardware yaw limit.
	MAV_STORM32_GIMBAL_DEVICE_ERROR_FLAGS_AT_YAW_LIMIT MAV_STORM32_GIMBAL_DEVICE_ERROR_FLAGS = 4
	// There is an error with the gimbal device's encoders.
	MAV_STORM32_GIMBAL_DEVICE_ERROR_FLAGS_ENCODER_ERROR MAV_STORM32_GIMBAL_DEVICE_ERROR_FLAGS = 8
	// There is an error with the gimbal device's power source.
	MAV_STORM32_GIMBAL_DEVICE_ERROR_FLAGS_POWER_ERROR MAV_STORM32_GIMBAL_DEVICE_ERROR_FLAGS = 16
	// There is an error with the gimbal device's motors.
	MAV_STORM32_GIMBAL_DEVICE_ERROR_FLAGS_MOTOR_ERROR MAV_STORM32_GIMBAL_DEVICE_ERROR_FLAGS = 32
	// There is an error with the gimbal device's software.
	MAV_STORM32_GIMBAL_DEVICE_ERROR_FLAGS_SOFTWARE_ERROR MAV_STORM32_GIMBAL_DEVICE_ERROR_FLAGS = 64
	// There is an error with the gimbal device's communication.
	MAV_STORM32_GIMBAL_DEVICE_ERROR_FLAGS_COMMS_ERROR MAV_STORM32_GIMBAL_DEVICE_ERROR_FLAGS = 128
	// Gimbal device is currently calibrating (not an error).
	MAV_STORM32_GIMBAL_DEVICE_ERROR_FLAGS_CALIBRATION_RUNNING MAV_STORM32_GIMBAL_DEVICE_ERROR_FLAGS = 256
	// Gimbal device is not assigned to a gimbal manager (not an error).
	MAV_STORM32_GIMBAL_DEVICE_ERROR_FLAGS_NO_MANAGER MAV_STORM32_GIMBAL_DEVICE_ERROR_FLAGS = 32768
)

var labels_MAV_STORM32_GIMBAL_DEVICE_ERROR_FLAGS = map[MAV_STORM32_GIMBAL_DEVICE_ERROR_FLAGS]string{}

// MarshalText implements the encoding.TextMarshaler interface.
func (e MAV_STORM32_GIMBAL_DEVICE_ERROR_FLAGS) MarshalText() ([]byte, error) {
	if l, ok := labels_MAV_STORM32_GIMBAL_DEVICE_ERROR_FLAGS[e]; ok {
		return []byte(l), nil
	}
	return nil, errors.New("invalid value")
}

var reverseLabels_MAV_STORM32_GIMBAL_DEVICE_ERROR_FLAGS = map[string]MAV_STORM32_GIMBAL_DEVICE_ERROR_FLAGS{}

// UnmarshalText implements the encoding.TextUnmarshaler interface.
func (e *MAV_STORM32_GIMBAL_DEVICE_ERROR_FLAGS) UnmarshalText(text []byte) error {
	if rl, ok := reverseLabels_MAV_STORM32_GIMBAL_DEVICE_ERROR_FLAGS[string(text)]; ok {
		*e = rl
		return nil
	}
	return errors.New("invalid value")
}

// String implements the fmt.Stringer interface.
func (e MAV_STORM32_GIMBAL_DEVICE_ERROR_FLAGS) String() string {
	if l, ok := labels_MAV_STORM32_GIMBAL_DEVICE_ERROR_FLAGS[e]; ok {
		return l
	}
	return "invalid value"
}
