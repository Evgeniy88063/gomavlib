//autogenerated:yes
//nolint:revive,misspell,govet,lll,dupl,gocritic
package storm32

import (
	"errors"
)

// RADIO_RC_CHANNELS flags (bitmask).
type RADIO_RC_CHANNELS_FLAGS uint32

const (
	// Failsafe is active.
	RADIO_RC_CHANNELS_FLAGS_FAILSAFE RADIO_RC_CHANNELS_FLAGS = 1
	// Indicates that the current frame has not been received. Channel values are frozen.
	RADIO_RC_CHANNELS_FLAGS_FRAME_MISSED RADIO_RC_CHANNELS_FLAGS = 2
)

var labels_RADIO_RC_CHANNELS_FLAGS = map[RADIO_RC_CHANNELS_FLAGS]string{
	RADIO_RC_CHANNELS_FLAGS_FAILSAFE:     "RADIO_RC_CHANNELS_FLAGS_FAILSAFE",
	RADIO_RC_CHANNELS_FLAGS_FRAME_MISSED: "RADIO_RC_CHANNELS_FLAGS_FRAME_MISSED",
}

// MarshalText implements the encoding.TextMarshaler interface.
func (e RADIO_RC_CHANNELS_FLAGS) MarshalText() ([]byte, error) {
	if l, ok := labels_RADIO_RC_CHANNELS_FLAGS[e]; ok {
		return []byte(l), nil
	}
	return nil, errors.New("invalid value")
}

var reverseLabels_RADIO_RC_CHANNELS_FLAGS = map[string]RADIO_RC_CHANNELS_FLAGS{}

// UnmarshalText implements the encoding.TextUnmarshaler interface.
func (e *RADIO_RC_CHANNELS_FLAGS) UnmarshalText(text []byte) error {
	if rl, ok := reverseLabels_RADIO_RC_CHANNELS_FLAGS[string(text)]; ok {
		*e = rl
		return nil
	}
	return errors.New("invalid value")
}

// String implements the fmt.Stringer interface.
func (e RADIO_RC_CHANNELS_FLAGS) String() string {
	if l, ok := labels_RADIO_RC_CHANNELS_FLAGS[e]; ok {
		return l
	}
	return "invalid value"
}
