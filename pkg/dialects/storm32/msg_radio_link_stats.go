//autogenerated:yes
//nolint:revive,misspell,govet,lll
package storm32

// Radio link statistics. Should be emitted only by components with component id MAV_COMP_ID_TELEMETRY_RADIO. Per default, rssi values are in MAVLink units: 0 represents weakest signal, 254 represents maximum signal; can be changed to dBm with the flag RADIO_LINK_STATS_FLAGS_RSSI_DBM.
type MessageRadioLinkStats struct {
	// Radio link statistics flags.
	Flags RADIO_LINK_STATS_FLAGS `mavenum:"uint8"`
	// Values: 0..100. UINT8_MAX: invalid/unknown.
	RxLq uint8 `mavname:"rx_LQ"`
	// Rssi of antenna1. UINT8_MAX: invalid/unknown.
	RxRssi1 uint8
	// Noise on antenna1. Radio dependent. INT8_MAX: invalid/unknown.
	RxSnr1 int8
	// Rssi of antenna2. UINT8_MAX: ignore/unknown, use rx_rssi1.
	RxRssi2 uint8
	// Noise on antenna2. Radio dependent. INT8_MAX: ignore/unknown, use rx_snr1.
	RxSnr2 int8
	// 0: antenna1, 1: antenna2, UINT8_MAX: ignore, no Rx receive diversity, use rx_rssi1, rx_snr1.
	RxReceiveAntenna uint8
	// 0: antenna1, 1: antenna2, UINT8_MAX: ignore, no Rx transmit diversity.
	RxTransmitAntenna uint8
	// Values: 0..100. UINT8_MAX: invalid/unknown.
	TxLq uint8 `mavname:"tx_LQ"`
	// Rssi of antenna1. UINT8_MAX: invalid/unknown.
	TxRssi1 uint8
	// Noise on antenna1. Radio dependent. INT8_MAX: invalid/unknown.
	TxSnr1 int8
	// Rssi of antenna2. UINT8_MAX: ignore/unknown, use tx_rssi1.
	TxRssi2 uint8
	// Noise on antenna2. Radio dependent. INT8_MAX: ignore/unknown, use tx_snr1.
	TxSnr2 int8
	// 0: antenna1, 1: antenna2, UINT8_MAX: ignore, no Tx receive diversity, use tx_rssi1, tx_snr1.
	TxReceiveAntenna uint8
	// 0: antenna1, 1: antenna2, UINT8_MAX: ignore, no Tx transmit diversity.
	TxTransmitAntenna uint8
}

// GetID implements the message.Message interface.
func (*MessageRadioLinkStats) GetID() uint32 {
	return 60046
}
