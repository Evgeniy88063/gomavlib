//autogenerated:yes
//nolint:revive,misspell,govet,lll,dupl,gocritic
package storm32

import (
	"fmt"
	"strconv"
)

type MAV_STORM32_TUNNEL_PAYLOAD_TYPE uint32

const (
	// Registered for STorM32 gimbal controller. For communication with gimbal or camera.
	MAV_STORM32_TUNNEL_PAYLOAD_TYPE_STORM32_CH1_IN MAV_STORM32_TUNNEL_PAYLOAD_TYPE = 200
	// Registered for STorM32 gimbal controller. For communication with gimbal or camera.
	MAV_STORM32_TUNNEL_PAYLOAD_TYPE_STORM32_CH1_OUT MAV_STORM32_TUNNEL_PAYLOAD_TYPE = 201
	// Registered for STorM32 gimbal controller. For communication with gimbal.
	MAV_STORM32_TUNNEL_PAYLOAD_TYPE_STORM32_CH2_IN MAV_STORM32_TUNNEL_PAYLOAD_TYPE = 202
	// Registered for STorM32 gimbal controller. For communication with gimbal.
	MAV_STORM32_TUNNEL_PAYLOAD_TYPE_STORM32_CH2_OUT MAV_STORM32_TUNNEL_PAYLOAD_TYPE = 203
	// Registered for STorM32 gimbal controller. For communication with camera.
	MAV_STORM32_TUNNEL_PAYLOAD_TYPE_STORM32_CH3_IN MAV_STORM32_TUNNEL_PAYLOAD_TYPE = 204
	// Registered for STorM32 gimbal controller. For communication with camera.
	MAV_STORM32_TUNNEL_PAYLOAD_TYPE_STORM32_CH3_OUT MAV_STORM32_TUNNEL_PAYLOAD_TYPE = 205
)

var labels_MAV_STORM32_TUNNEL_PAYLOAD_TYPE = map[MAV_STORM32_TUNNEL_PAYLOAD_TYPE]string{
	MAV_STORM32_TUNNEL_PAYLOAD_TYPE_STORM32_CH1_IN:  "MAV_STORM32_TUNNEL_PAYLOAD_TYPE_STORM32_CH1_IN",
	MAV_STORM32_TUNNEL_PAYLOAD_TYPE_STORM32_CH1_OUT: "MAV_STORM32_TUNNEL_PAYLOAD_TYPE_STORM32_CH1_OUT",
	MAV_STORM32_TUNNEL_PAYLOAD_TYPE_STORM32_CH2_IN:  "MAV_STORM32_TUNNEL_PAYLOAD_TYPE_STORM32_CH2_IN",
	MAV_STORM32_TUNNEL_PAYLOAD_TYPE_STORM32_CH2_OUT: "MAV_STORM32_TUNNEL_PAYLOAD_TYPE_STORM32_CH2_OUT",
	MAV_STORM32_TUNNEL_PAYLOAD_TYPE_STORM32_CH3_IN:  "MAV_STORM32_TUNNEL_PAYLOAD_TYPE_STORM32_CH3_IN",
	MAV_STORM32_TUNNEL_PAYLOAD_TYPE_STORM32_CH3_OUT: "MAV_STORM32_TUNNEL_PAYLOAD_TYPE_STORM32_CH3_OUT",
}

var values_MAV_STORM32_TUNNEL_PAYLOAD_TYPE = map[string]MAV_STORM32_TUNNEL_PAYLOAD_TYPE{
	"MAV_STORM32_TUNNEL_PAYLOAD_TYPE_STORM32_CH1_IN":  MAV_STORM32_TUNNEL_PAYLOAD_TYPE_STORM32_CH1_IN,
	"MAV_STORM32_TUNNEL_PAYLOAD_TYPE_STORM32_CH1_OUT": MAV_STORM32_TUNNEL_PAYLOAD_TYPE_STORM32_CH1_OUT,
	"MAV_STORM32_TUNNEL_PAYLOAD_TYPE_STORM32_CH2_IN":  MAV_STORM32_TUNNEL_PAYLOAD_TYPE_STORM32_CH2_IN,
	"MAV_STORM32_TUNNEL_PAYLOAD_TYPE_STORM32_CH2_OUT": MAV_STORM32_TUNNEL_PAYLOAD_TYPE_STORM32_CH2_OUT,
	"MAV_STORM32_TUNNEL_PAYLOAD_TYPE_STORM32_CH3_IN":  MAV_STORM32_TUNNEL_PAYLOAD_TYPE_STORM32_CH3_IN,
	"MAV_STORM32_TUNNEL_PAYLOAD_TYPE_STORM32_CH3_OUT": MAV_STORM32_TUNNEL_PAYLOAD_TYPE_STORM32_CH3_OUT,
}

// MarshalText implements the encoding.TextMarshaler interface.
func (e MAV_STORM32_TUNNEL_PAYLOAD_TYPE) MarshalText() ([]byte, error) {
	name, ok := labels_MAV_STORM32_TUNNEL_PAYLOAD_TYPE[e]
	if !ok {
		return nil, fmt.Errorf("invalid value %d", e)
	}
	return []byte(name), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface.
func (e *MAV_STORM32_TUNNEL_PAYLOAD_TYPE) UnmarshalText(text []byte) error {
	value, ok := values_MAV_STORM32_TUNNEL_PAYLOAD_TYPE[string(text)]
	if !ok {
		return fmt.Errorf("invalid label '%s'", text)
	}
	*e = value
	return nil
}

// String implements the fmt.Stringer interface.
func (e MAV_STORM32_TUNNEL_PAYLOAD_TYPE) String() string {
	name, ok := labels_MAV_STORM32_TUNNEL_PAYLOAD_TYPE[e]
	if !ok {
		return strconv.Itoa(int(e))
	}
	return name
}
