//autogenerated:yes
//nolint:revive,misspell,govet,lll,dupl,gocritic
package uavionix

import (
	"fmt"
	"strconv"
)

// GPS lataral offset encoding
type UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LAT uint32

const (
	UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LAT_NO_DATA  UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LAT = 0
	UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LAT_LEFT_2M  UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LAT = 1
	UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LAT_LEFT_4M  UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LAT = 2
	UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LAT_LEFT_6M  UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LAT = 3
	UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LAT_RIGHT_0M UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LAT = 4
	UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LAT_RIGHT_2M UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LAT = 5
	UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LAT_RIGHT_4M UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LAT = 6
	UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LAT_RIGHT_6M UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LAT = 7
)

var labels_UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LAT = map[UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LAT]string{
	UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LAT_NO_DATA:  "UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LAT_NO_DATA",
	UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LAT_LEFT_2M:  "UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LAT_LEFT_2M",
	UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LAT_LEFT_4M:  "UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LAT_LEFT_4M",
	UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LAT_LEFT_6M:  "UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LAT_LEFT_6M",
	UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LAT_RIGHT_0M: "UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LAT_RIGHT_0M",
	UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LAT_RIGHT_2M: "UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LAT_RIGHT_2M",
	UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LAT_RIGHT_4M: "UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LAT_RIGHT_4M",
	UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LAT_RIGHT_6M: "UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LAT_RIGHT_6M",
}

var values_UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LAT = map[string]UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LAT{
	"UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LAT_NO_DATA":  UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LAT_NO_DATA,
	"UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LAT_LEFT_2M":  UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LAT_LEFT_2M,
	"UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LAT_LEFT_4M":  UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LAT_LEFT_4M,
	"UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LAT_LEFT_6M":  UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LAT_LEFT_6M,
	"UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LAT_RIGHT_0M": UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LAT_RIGHT_0M,
	"UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LAT_RIGHT_2M": UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LAT_RIGHT_2M,
	"UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LAT_RIGHT_4M": UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LAT_RIGHT_4M,
	"UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LAT_RIGHT_6M": UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LAT_RIGHT_6M,
}

// MarshalText implements the encoding.TextMarshaler interface.
func (e UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LAT) MarshalText() ([]byte, error) {
	name, ok := labels_UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LAT[e]
	if !ok {
		return nil, fmt.Errorf("invalid value %d", e)
	}
	return []byte(name), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface.
func (e *UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LAT) UnmarshalText(text []byte) error {
	value, ok := values_UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LAT[string(text)]
	if !ok {
		return fmt.Errorf("invalid label '%s'", text)
	}
	*e = value
	return nil
}

// String implements the fmt.Stringer interface.
func (e UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LAT) String() string {
	name, ok := labels_UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LAT[e]
	if !ok {
		return strconv.Itoa(int(e))
	}
	return name
}
