//autogenerated:yes
//nolint:revive,misspell,govet,lll,dupl,gocritic
package uavionix

import (
	"fmt"
	"strconv"
)

// State flags for X-Bit and reserved fields.
type UAVIONIX_ADSB_XBIT uint64

const (
	UAVIONIX_ADSB_XBIT_ENABLED UAVIONIX_ADSB_XBIT = 128
)

var labels_UAVIONIX_ADSB_XBIT = map[UAVIONIX_ADSB_XBIT]string{
	UAVIONIX_ADSB_XBIT_ENABLED: "UAVIONIX_ADSB_XBIT_ENABLED",
}

var values_UAVIONIX_ADSB_XBIT = map[string]UAVIONIX_ADSB_XBIT{
	"UAVIONIX_ADSB_XBIT_ENABLED": UAVIONIX_ADSB_XBIT_ENABLED,
}

// MarshalText implements the encoding.TextMarshaler interface.
func (e UAVIONIX_ADSB_XBIT) MarshalText() ([]byte, error) {
	if name, ok := labels_UAVIONIX_ADSB_XBIT[e]; ok {
		return []byte(name), nil
	}
	return []byte(strconv.Itoa(int(e))), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface.
func (e *UAVIONIX_ADSB_XBIT) UnmarshalText(text []byte) error {
	if value, ok := values_UAVIONIX_ADSB_XBIT[string(text)]; ok {
		*e = value
	} else if value, err := strconv.Atoi(string(text)); err == nil {
		*e = UAVIONIX_ADSB_XBIT(value)
	} else {
		return fmt.Errorf("invalid label '%s'", text)
	}
	return nil
}

// String implements the fmt.Stringer interface.
func (e UAVIONIX_ADSB_XBIT) String() string {
	val, _ := e.MarshalText()
	return string(val)
}
