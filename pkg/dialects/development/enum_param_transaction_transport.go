//autogenerated:yes
//nolint:revive,misspell,govet,lll,dupl,gocritic
package development

import (
	"fmt"
	"strconv"
)

// Possible transport layers to set and get parameters via mavlink during a parameter transaction.
type PARAM_TRANSACTION_TRANSPORT uint32

const (
	// Transaction over param transport.
	PARAM_TRANSACTION_TRANSPORT_PARAM PARAM_TRANSACTION_TRANSPORT = 0
	// Transaction over param_ext transport.
	PARAM_TRANSACTION_TRANSPORT_PARAM_EXT PARAM_TRANSACTION_TRANSPORT = 1
)

var labels_PARAM_TRANSACTION_TRANSPORT = map[PARAM_TRANSACTION_TRANSPORT]string{
	PARAM_TRANSACTION_TRANSPORT_PARAM:     "PARAM_TRANSACTION_TRANSPORT_PARAM",
	PARAM_TRANSACTION_TRANSPORT_PARAM_EXT: "PARAM_TRANSACTION_TRANSPORT_PARAM_EXT",
}

var values_PARAM_TRANSACTION_TRANSPORT = map[string]PARAM_TRANSACTION_TRANSPORT{
	"PARAM_TRANSACTION_TRANSPORT_PARAM":     PARAM_TRANSACTION_TRANSPORT_PARAM,
	"PARAM_TRANSACTION_TRANSPORT_PARAM_EXT": PARAM_TRANSACTION_TRANSPORT_PARAM_EXT,
}

// MarshalText implements the encoding.TextMarshaler interface.
func (e PARAM_TRANSACTION_TRANSPORT) MarshalText() ([]byte, error) {
	name, ok := labels_PARAM_TRANSACTION_TRANSPORT[e]
	if !ok {
		return nil, fmt.Errorf("invalid value %d", e)
	}
	return []byte(name), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface.
func (e *PARAM_TRANSACTION_TRANSPORT) UnmarshalText(text []byte) error {
	value, ok := values_PARAM_TRANSACTION_TRANSPORT[string(text)]
	if !ok {
		return fmt.Errorf("invalid label '%s'", text)
	}
	*e = value
	return nil
}

// String implements the fmt.Stringer interface.
func (e PARAM_TRANSACTION_TRANSPORT) String() string {
	name, ok := labels_PARAM_TRANSACTION_TRANSPORT[e]
	if !ok {
		return strconv.Itoa(int(e))
	}
	return name
}
