//autogenerated:yes
//nolint:revive,misspell,govet,lll,dupl,gocritic
package development

import (
	"fmt"
	"strconv"
)

// Possible parameter transaction actions.
type PARAM_TRANSACTION_ACTION uint32

const (
	// Commit the current parameter transaction.
	PARAM_TRANSACTION_ACTION_START PARAM_TRANSACTION_ACTION = 0
	// Commit the current parameter transaction.
	PARAM_TRANSACTION_ACTION_COMMIT PARAM_TRANSACTION_ACTION = 1
	// Cancel the current parameter transaction.
	PARAM_TRANSACTION_ACTION_CANCEL PARAM_TRANSACTION_ACTION = 2
)

var labels_PARAM_TRANSACTION_ACTION = map[PARAM_TRANSACTION_ACTION]string{
	PARAM_TRANSACTION_ACTION_START:  "PARAM_TRANSACTION_ACTION_START",
	PARAM_TRANSACTION_ACTION_COMMIT: "PARAM_TRANSACTION_ACTION_COMMIT",
	PARAM_TRANSACTION_ACTION_CANCEL: "PARAM_TRANSACTION_ACTION_CANCEL",
}

var values_PARAM_TRANSACTION_ACTION = map[string]PARAM_TRANSACTION_ACTION{
	"PARAM_TRANSACTION_ACTION_START":  PARAM_TRANSACTION_ACTION_START,
	"PARAM_TRANSACTION_ACTION_COMMIT": PARAM_TRANSACTION_ACTION_COMMIT,
	"PARAM_TRANSACTION_ACTION_CANCEL": PARAM_TRANSACTION_ACTION_CANCEL,
}

// MarshalText implements the encoding.TextMarshaler interface.
func (e PARAM_TRANSACTION_ACTION) MarshalText() ([]byte, error) {
	name, ok := labels_PARAM_TRANSACTION_ACTION[e]
	if !ok {
		return nil, fmt.Errorf("invalid value %d", e)
	}
	return []byte(name), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface.
func (e *PARAM_TRANSACTION_ACTION) UnmarshalText(text []byte) error {
	value, ok := values_PARAM_TRANSACTION_ACTION[string(text)]
	if !ok {
		return fmt.Errorf("invalid label '%s'", text)
	}
	*e = value
	return nil
}

// String implements the fmt.Stringer interface.
func (e PARAM_TRANSACTION_ACTION) String() string {
	name, ok := labels_PARAM_TRANSACTION_ACTION[e]
	if !ok {
		return strconv.Itoa(int(e))
	}
	return name
}
