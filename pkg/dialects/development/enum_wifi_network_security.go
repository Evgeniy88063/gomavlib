//autogenerated:yes
//nolint:revive,misspell,govet,lll,dupl,gocritic
package development

import (
	"fmt"
	"strconv"
)

// WiFi wireless security protocols.
type WIFI_NETWORK_SECURITY uint32

const (
	// Undefined or unknown security protocol.
	WIFI_NETWORK_SECURITY_UNDEFINED WIFI_NETWORK_SECURITY = 0
	// Open network, no security.
	WIFI_NETWORK_SECURITY_OPEN WIFI_NETWORK_SECURITY = 1
	// WEP.
	WIFI_NETWORK_SECURITY_WEP WIFI_NETWORK_SECURITY = 2
	// WPA1.
	WIFI_NETWORK_SECURITY_WPA1 WIFI_NETWORK_SECURITY = 3
	// WPA2.
	WIFI_NETWORK_SECURITY_WPA2 WIFI_NETWORK_SECURITY = 4
	// WPA3.
	WIFI_NETWORK_SECURITY_WPA3 WIFI_NETWORK_SECURITY = 5
)

var labels_WIFI_NETWORK_SECURITY = map[WIFI_NETWORK_SECURITY]string{
	WIFI_NETWORK_SECURITY_UNDEFINED: "WIFI_NETWORK_SECURITY_UNDEFINED",
	WIFI_NETWORK_SECURITY_OPEN:      "WIFI_NETWORK_SECURITY_OPEN",
	WIFI_NETWORK_SECURITY_WEP:       "WIFI_NETWORK_SECURITY_WEP",
	WIFI_NETWORK_SECURITY_WPA1:      "WIFI_NETWORK_SECURITY_WPA1",
	WIFI_NETWORK_SECURITY_WPA2:      "WIFI_NETWORK_SECURITY_WPA2",
	WIFI_NETWORK_SECURITY_WPA3:      "WIFI_NETWORK_SECURITY_WPA3",
}

var values_WIFI_NETWORK_SECURITY = map[string]WIFI_NETWORK_SECURITY{
	"WIFI_NETWORK_SECURITY_UNDEFINED": WIFI_NETWORK_SECURITY_UNDEFINED,
	"WIFI_NETWORK_SECURITY_OPEN":      WIFI_NETWORK_SECURITY_OPEN,
	"WIFI_NETWORK_SECURITY_WEP":       WIFI_NETWORK_SECURITY_WEP,
	"WIFI_NETWORK_SECURITY_WPA1":      WIFI_NETWORK_SECURITY_WPA1,
	"WIFI_NETWORK_SECURITY_WPA2":      WIFI_NETWORK_SECURITY_WPA2,
	"WIFI_NETWORK_SECURITY_WPA3":      WIFI_NETWORK_SECURITY_WPA3,
}

// MarshalText implements the encoding.TextMarshaler interface.
func (e WIFI_NETWORK_SECURITY) MarshalText() ([]byte, error) {
	name, ok := labels_WIFI_NETWORK_SECURITY[e]
	if !ok {
		return nil, fmt.Errorf("invalid value %d", e)
	}
	return []byte(name), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface.
func (e *WIFI_NETWORK_SECURITY) UnmarshalText(text []byte) error {
	value, ok := values_WIFI_NETWORK_SECURITY[string(text)]
	if !ok {
		return fmt.Errorf("invalid label '%s'", text)
	}
	*e = value
	return nil
}

// String implements the fmt.Stringer interface.
func (e WIFI_NETWORK_SECURITY) String() string {
	name, ok := labels_WIFI_NETWORK_SECURITY[e]
	if !ok {
		return strconv.Itoa(int(e))
	}
	return name
}
