//autogenerated:yes
//nolint:revive,misspell,govet,lll,dupl
package development

import (
	"errors"
)

// Types of airspeed sensor/data. May be be used in AIRSPEED message to estimate accuracy of indicated speed.
type AIRSPEED_SENSOR_TYPE int

const (
	// Airspeed sensor type unknown/not supplied.
	AIRSPEED_SENSOR_TYPE_UNKNOWN AIRSPEED_SENSOR_TYPE = 0
	// Differential airspeed sensor
	AIRSPEED_SENSOR_TYPE_DIFFERENTIAL AIRSPEED_SENSOR_TYPE = 1
	// Mass-flow airspeed sensor.
	AIRSPEED_SENSOR_TYPE_MASS_FLOW AIRSPEED_SENSOR_TYPE = 2
	// Windvane airspeed sensor.
	AIRSPEED_SENSOR_TYPE_WINDVANE AIRSPEED_SENSOR_TYPE = 3
	// Synthetic/calculated airspeed.
	AIRSPEED_SENSOR_TYPE_SYNTHETIC AIRSPEED_SENSOR_TYPE = 4
)

var labels_AIRSPEED_SENSOR_TYPE = map[AIRSPEED_SENSOR_TYPE]string{}

// MarshalText implements the encoding.TextMarshaler interface.
func (e AIRSPEED_SENSOR_TYPE) MarshalText() ([]byte, error) {
	if l, ok := labels_AIRSPEED_SENSOR_TYPE[e]; ok {
		return []byte(l), nil
	}
	return nil, errors.New("invalid value")
}

var reverseLabels_AIRSPEED_SENSOR_TYPE = map[string]AIRSPEED_SENSOR_TYPE{}

// UnmarshalText implements the encoding.TextUnmarshaler interface.
func (e *AIRSPEED_SENSOR_TYPE) UnmarshalText(text []byte) error {
	if rl, ok := reverseLabels_AIRSPEED_SENSOR_TYPE[string(text)]; ok {
		*e = rl
		return nil
	}
	return errors.New("invalid value")
}

// String implements the fmt.Stringer interface.
func (e AIRSPEED_SENSOR_TYPE) String() string {
	if l, ok := labels_AIRSPEED_SENSOR_TYPE[e]; ok {
		return l
	}
	return "invalid value"
}
