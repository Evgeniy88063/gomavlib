//autogenerated:yes
//nolint:revive,misspell,govet,lll,dupl,gocritic
package ualberta

import (
	"fmt"
	"strconv"
)

// Available autopilot modes for ualberta uav
type UALBERTA_AUTOPILOT_MODE uint32

const (
	// Raw input pulse widts sent to output
	MODE_MANUAL_DIRECT UALBERTA_AUTOPILOT_MODE = 1
	// Inputs are normalized using calibration, the converted back to raw pulse widths for output
	MODE_MANUAL_SCALED UALBERTA_AUTOPILOT_MODE = 2
	MODE_AUTO_PID_ATT  UALBERTA_AUTOPILOT_MODE = 3
	MODE_AUTO_PID_VEL  UALBERTA_AUTOPILOT_MODE = 4
	MODE_AUTO_PID_POS  UALBERTA_AUTOPILOT_MODE = 5
)

var labels_UALBERTA_AUTOPILOT_MODE = map[UALBERTA_AUTOPILOT_MODE]string{
	MODE_MANUAL_DIRECT: "MODE_MANUAL_DIRECT",
	MODE_MANUAL_SCALED: "MODE_MANUAL_SCALED",
	MODE_AUTO_PID_ATT:  "MODE_AUTO_PID_ATT",
	MODE_AUTO_PID_VEL:  "MODE_AUTO_PID_VEL",
	MODE_AUTO_PID_POS:  "MODE_AUTO_PID_POS",
}

var values_UALBERTA_AUTOPILOT_MODE = map[string]UALBERTA_AUTOPILOT_MODE{
	"MODE_MANUAL_DIRECT": MODE_MANUAL_DIRECT,
	"MODE_MANUAL_SCALED": MODE_MANUAL_SCALED,
	"MODE_AUTO_PID_ATT":  MODE_AUTO_PID_ATT,
	"MODE_AUTO_PID_VEL":  MODE_AUTO_PID_VEL,
	"MODE_AUTO_PID_POS":  MODE_AUTO_PID_POS,
}

// MarshalText implements the encoding.TextMarshaler interface.
func (e UALBERTA_AUTOPILOT_MODE) MarshalText() ([]byte, error) {
	name, ok := labels_UALBERTA_AUTOPILOT_MODE[e]
	if !ok {
		return nil, fmt.Errorf("invalid value %d", e)
	}
	return []byte(name), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface.
func (e *UALBERTA_AUTOPILOT_MODE) UnmarshalText(text []byte) error {
	value, ok := values_UALBERTA_AUTOPILOT_MODE[string(text)]
	if !ok {
		return fmt.Errorf("invalid label '%s'", text)
	}
	*e = value
	return nil
}

// String implements the fmt.Stringer interface.
func (e UALBERTA_AUTOPILOT_MODE) String() string {
	name, ok := labels_UALBERTA_AUTOPILOT_MODE[e]
	if !ok {
		return strconv.Itoa(int(e))
	}
	return name
}
