//autogenerated:yes
//nolint:revive,misspell,govet,lll,dupl
package all

import (
	"errors"
)

// Gimbal device capability flags.
type MAV_STORM32_GIMBAL_DEVICE_CAP_FLAGS uint32

const (
	// Gimbal device supports a retracted position.
	MAV_STORM32_GIMBAL_DEVICE_CAP_FLAGS_HAS_RETRACT MAV_STORM32_GIMBAL_DEVICE_CAP_FLAGS = 1
	// Gimbal device supports a horizontal, forward looking position, stabilized. Can also be used to reset the gimbal's orientation.
	MAV_STORM32_GIMBAL_DEVICE_CAP_FLAGS_HAS_NEUTRAL MAV_STORM32_GIMBAL_DEVICE_CAP_FLAGS = 2
	// Gimbal device supports rotating around roll axis.
	MAV_STORM32_GIMBAL_DEVICE_CAP_FLAGS_HAS_ROLL_AXIS MAV_STORM32_GIMBAL_DEVICE_CAP_FLAGS = 4
	// Gimbal device supports to follow a roll angle relative to the vehicle.
	MAV_STORM32_GIMBAL_DEVICE_CAP_FLAGS_HAS_ROLL_FOLLOW MAV_STORM32_GIMBAL_DEVICE_CAP_FLAGS = 8
	// Gimbal device supports locking to an roll angle (generally that's the default).
	MAV_STORM32_GIMBAL_DEVICE_CAP_FLAGS_HAS_ROLL_LOCK MAV_STORM32_GIMBAL_DEVICE_CAP_FLAGS = 16
	// Gimbal device supports rotating around pitch axis.
	MAV_STORM32_GIMBAL_DEVICE_CAP_FLAGS_HAS_PITCH_AXIS MAV_STORM32_GIMBAL_DEVICE_CAP_FLAGS = 32
	// Gimbal device supports to follow a pitch angle relative to the vehicle.
	MAV_STORM32_GIMBAL_DEVICE_CAP_FLAGS_HAS_PITCH_FOLLOW MAV_STORM32_GIMBAL_DEVICE_CAP_FLAGS = 64
	// Gimbal device supports locking to an pitch angle (generally that's the default).
	MAV_STORM32_GIMBAL_DEVICE_CAP_FLAGS_HAS_PITCH_LOCK MAV_STORM32_GIMBAL_DEVICE_CAP_FLAGS = 128
	// Gimbal device supports rotating around yaw axis.
	MAV_STORM32_GIMBAL_DEVICE_CAP_FLAGS_HAS_YAW_AXIS MAV_STORM32_GIMBAL_DEVICE_CAP_FLAGS = 256
	// Gimbal device supports to follow a yaw angle relative to the vehicle (generally that's the default).
	MAV_STORM32_GIMBAL_DEVICE_CAP_FLAGS_HAS_YAW_FOLLOW MAV_STORM32_GIMBAL_DEVICE_CAP_FLAGS = 512
	// Gimbal device supports locking to a heading angle.
	MAV_STORM32_GIMBAL_DEVICE_CAP_FLAGS_HAS_YAW_LOCK MAV_STORM32_GIMBAL_DEVICE_CAP_FLAGS = 1024
	// Gimbal device supports yawing/panning infinitely (e.g. using a slip ring).
	MAV_STORM32_GIMBAL_DEVICE_CAP_FLAGS_HAS_INFINITE_YAW MAV_STORM32_GIMBAL_DEVICE_CAP_FLAGS = 2048
	// Gimbal device supports absolute yaw angles (this usually requires support by an autopilot, and can be dynamic, i.e., go on and off during runtime).
	MAV_STORM32_GIMBAL_DEVICE_CAP_FLAGS_HAS_ABSOLUTE_YAW MAV_STORM32_GIMBAL_DEVICE_CAP_FLAGS = 65536
	// Gimbal device supports control via an RC input signal.
	MAV_STORM32_GIMBAL_DEVICE_CAP_FLAGS_HAS_RC MAV_STORM32_GIMBAL_DEVICE_CAP_FLAGS = 131072
)

var labels_MAV_STORM32_GIMBAL_DEVICE_CAP_FLAGS = map[MAV_STORM32_GIMBAL_DEVICE_CAP_FLAGS]string{}

// MarshalText implements the encoding.TextMarshaler interface.
func (e MAV_STORM32_GIMBAL_DEVICE_CAP_FLAGS) MarshalText() ([]byte, error) {
	if l, ok := labels_MAV_STORM32_GIMBAL_DEVICE_CAP_FLAGS[e]; ok {
		return []byte(l), nil
	}
	return nil, errors.New("invalid value")
}

var reverseLabels_MAV_STORM32_GIMBAL_DEVICE_CAP_FLAGS = map[string]MAV_STORM32_GIMBAL_DEVICE_CAP_FLAGS{}

// UnmarshalText implements the encoding.TextUnmarshaler interface.
func (e *MAV_STORM32_GIMBAL_DEVICE_CAP_FLAGS) UnmarshalText(text []byte) error {
	if rl, ok := reverseLabels_MAV_STORM32_GIMBAL_DEVICE_CAP_FLAGS[string(text)]; ok {
		*e = rl
		return nil
	}
	return errors.New("invalid value")
}

// String implements the fmt.Stringer interface.
func (e MAV_STORM32_GIMBAL_DEVICE_CAP_FLAGS) String() string {
	if l, ok := labels_MAV_STORM32_GIMBAL_DEVICE_CAP_FLAGS[e]; ok {
		return l
	}
	return "invalid value"
}
