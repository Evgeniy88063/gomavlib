//autogenerated:yes
//nolint:revive,misspell,govet,lll,dupl,gocritic
package all

import (
	"errors"
)

type AVSS_M300_OPERATION_MODE uint32

const (
	// In manual control mode
	MODE_M300_MANUAL_CTRL AVSS_M300_OPERATION_MODE = 0
	// In attitude mode
	MODE_M300_ATTITUDE AVSS_M300_OPERATION_MODE = 1
	// In GPS mode
	MODE_M300_P_GPS AVSS_M300_OPERATION_MODE = 6
	// In hotpoint mode
	MODE_M300_HOTPOINT_MODE AVSS_M300_OPERATION_MODE = 9
	// In assisted takeoff mode
	MODE_M300_ASSISTED_TAKEOFF AVSS_M300_OPERATION_MODE = 10
	// In auto takeoff mode
	MODE_M300_AUTO_TAKEOFF AVSS_M300_OPERATION_MODE = 11
	// In auto landing mode
	MODE_M300_AUTO_LANDING AVSS_M300_OPERATION_MODE = 12
	// In go home mode
	MODE_M300_NAVI_GO_HOME AVSS_M300_OPERATION_MODE = 15
	// In sdk control mode
	MODE_M300_NAVI_SDK_CTRL AVSS_M300_OPERATION_MODE = 17
	// In sport mode
	MODE_M300_S_SPORT AVSS_M300_OPERATION_MODE = 31
	// In force auto landing mode
	MODE_M300_FORCE_AUTO_LANDING AVSS_M300_OPERATION_MODE = 33
	// In tripod mode
	MODE_M300_T_TRIPOD AVSS_M300_OPERATION_MODE = 38
	// In search mode
	MODE_M300_SEARCH_MODE AVSS_M300_OPERATION_MODE = 40
	// In engine mode
	MODE_M300_ENGINE_START AVSS_M300_OPERATION_MODE = 41
)

var labels_AVSS_M300_OPERATION_MODE = map[AVSS_M300_OPERATION_MODE]string{}

// MarshalText implements the encoding.TextMarshaler interface.
func (e AVSS_M300_OPERATION_MODE) MarshalText() ([]byte, error) {
	if l, ok := labels_AVSS_M300_OPERATION_MODE[e]; ok {
		return []byte(l), nil
	}
	return nil, errors.New("invalid value")
}

var reverseLabels_AVSS_M300_OPERATION_MODE = map[string]AVSS_M300_OPERATION_MODE{}

// UnmarshalText implements the encoding.TextUnmarshaler interface.
func (e *AVSS_M300_OPERATION_MODE) UnmarshalText(text []byte) error {
	if rl, ok := reverseLabels_AVSS_M300_OPERATION_MODE[string(text)]; ok {
		*e = rl
		return nil
	}
	return errors.New("invalid value")
}

// String implements the fmt.Stringer interface.
func (e AVSS_M300_OPERATION_MODE) String() string {
	if l, ok := labels_AVSS_M300_OPERATION_MODE[e]; ok {
		return l
	}
	return "invalid value"
}
