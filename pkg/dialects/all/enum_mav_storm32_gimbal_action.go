//autogenerated:yes
//nolint:revive,misspell,govet,lll,dupl,gocritic
package all

import (
	"errors"
)

// Gimbal actions.
type MAV_STORM32_GIMBAL_ACTION uint32

const (
	// Trigger the gimbal device to recenter the gimbal.
	MAV_STORM32_GIMBAL_ACTION_RECENTER MAV_STORM32_GIMBAL_ACTION = 1
	// Trigger the gimbal device to run a calibration.
	MAV_STORM32_GIMBAL_ACTION_CALIBRATION MAV_STORM32_GIMBAL_ACTION = 2
	// Trigger gimbal device to (re)discover the gimbal manager during run time.
	MAV_STORM32_GIMBAL_ACTION_DISCOVER_MANAGER MAV_STORM32_GIMBAL_ACTION = 3
)

var labels_MAV_STORM32_GIMBAL_ACTION = map[MAV_STORM32_GIMBAL_ACTION]string{}

// MarshalText implements the encoding.TextMarshaler interface.
func (e MAV_STORM32_GIMBAL_ACTION) MarshalText() ([]byte, error) {
	if l, ok := labels_MAV_STORM32_GIMBAL_ACTION[e]; ok {
		return []byte(l), nil
	}
	return nil, errors.New("invalid value")
}

var reverseLabels_MAV_STORM32_GIMBAL_ACTION = map[string]MAV_STORM32_GIMBAL_ACTION{}

// UnmarshalText implements the encoding.TextUnmarshaler interface.
func (e *MAV_STORM32_GIMBAL_ACTION) UnmarshalText(text []byte) error {
	if rl, ok := reverseLabels_MAV_STORM32_GIMBAL_ACTION[string(text)]; ok {
		*e = rl
		return nil
	}
	return errors.New("invalid value")
}

// String implements the fmt.Stringer interface.
func (e MAV_STORM32_GIMBAL_ACTION) String() string {
	if l, ok := labels_MAV_STORM32_GIMBAL_ACTION[e]; ok {
		return l
	}
	return "invalid value"
}
