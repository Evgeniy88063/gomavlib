//autogenerated:yes
//nolint:revive,misspell,govet,lll,dupl,gocritic
package csairlink

import (
	"fmt"
	"strconv"
)

type AIRLINK_AUTH_RESPONSE_TYPE uint32

const (
	// Login or password error
	AIRLINK_ERROR_LOGIN_OR_PASS AIRLINK_AUTH_RESPONSE_TYPE = 0
	// Auth successful
	AIRLINK_AUTH_OK AIRLINK_AUTH_RESPONSE_TYPE = 1
)

var labels_AIRLINK_AUTH_RESPONSE_TYPE = map[AIRLINK_AUTH_RESPONSE_TYPE]string{
	AIRLINK_ERROR_LOGIN_OR_PASS: "AIRLINK_ERROR_LOGIN_OR_PASS",
	AIRLINK_AUTH_OK:             "AIRLINK_AUTH_OK",
}

var values_AIRLINK_AUTH_RESPONSE_TYPE = map[string]AIRLINK_AUTH_RESPONSE_TYPE{
	"AIRLINK_ERROR_LOGIN_OR_PASS": AIRLINK_ERROR_LOGIN_OR_PASS,
	"AIRLINK_AUTH_OK":             AIRLINK_AUTH_OK,
}

// MarshalText implements the encoding.TextMarshaler interface.
func (e AIRLINK_AUTH_RESPONSE_TYPE) MarshalText() ([]byte, error) {
	name, ok := labels_AIRLINK_AUTH_RESPONSE_TYPE[e]
	if !ok {
		return nil, fmt.Errorf("invalid value %d", e)
	}
	return []byte(name), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface.
func (e *AIRLINK_AUTH_RESPONSE_TYPE) UnmarshalText(text []byte) error {
	value, ok := values_AIRLINK_AUTH_RESPONSE_TYPE[string(text)]
	if !ok {
		return fmt.Errorf("invalid label '%s'", text)
	}
	*e = value
	return nil
}

// String implements the fmt.Stringer interface.
func (e AIRLINK_AUTH_RESPONSE_TYPE) String() string {
	name, ok := labels_AIRLINK_AUTH_RESPONSE_TYPE[e]
	if !ok {
		return strconv.Itoa(int(e))
	}
	return name
}
