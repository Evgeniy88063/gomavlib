//autogenerated:yes
//nolint:revive,misspell,govet,lll,dupl,gocritic
package asluav

import (
	"fmt"
	"strconv"
)

type GSM_LINK_TYPE uint32

const (
	// no service
	GSM_LINK_TYPE_NONE GSM_LINK_TYPE = 0
	// link type unknown
	GSM_LINK_TYPE_UNKNOWN GSM_LINK_TYPE = 1
	// 2G (GSM/GRPS/EDGE) link
	GSM_LINK_TYPE_2G GSM_LINK_TYPE = 2
	// 3G link (WCDMA/HSDPA/HSPA)
	GSM_LINK_TYPE_3G GSM_LINK_TYPE = 3
	// 4G link (LTE)
	GSM_LINK_TYPE_4G GSM_LINK_TYPE = 4
)

var labels_GSM_LINK_TYPE = map[GSM_LINK_TYPE]string{
	GSM_LINK_TYPE_NONE:    "GSM_LINK_TYPE_NONE",
	GSM_LINK_TYPE_UNKNOWN: "GSM_LINK_TYPE_UNKNOWN",
	GSM_LINK_TYPE_2G:      "GSM_LINK_TYPE_2G",
	GSM_LINK_TYPE_3G:      "GSM_LINK_TYPE_3G",
	GSM_LINK_TYPE_4G:      "GSM_LINK_TYPE_4G",
}

var values_GSM_LINK_TYPE = map[string]GSM_LINK_TYPE{
	"GSM_LINK_TYPE_NONE":    GSM_LINK_TYPE_NONE,
	"GSM_LINK_TYPE_UNKNOWN": GSM_LINK_TYPE_UNKNOWN,
	"GSM_LINK_TYPE_2G":      GSM_LINK_TYPE_2G,
	"GSM_LINK_TYPE_3G":      GSM_LINK_TYPE_3G,
	"GSM_LINK_TYPE_4G":      GSM_LINK_TYPE_4G,
}

// MarshalText implements the encoding.TextMarshaler interface.
func (e GSM_LINK_TYPE) MarshalText() ([]byte, error) {
	name, ok := labels_GSM_LINK_TYPE[e]
	if !ok {
		return nil, fmt.Errorf("invalid value %d", e)
	}
	return []byte(name), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface.
func (e *GSM_LINK_TYPE) UnmarshalText(text []byte) error {
	value, ok := values_GSM_LINK_TYPE[string(text)]
	if !ok {
		return fmt.Errorf("invalid label '%s'", text)
	}
	*e = value
	return nil
}

// String implements the fmt.Stringer interface.
func (e GSM_LINK_TYPE) String() string {
	name, ok := labels_GSM_LINK_TYPE[e]
	if !ok {
		return strconv.Itoa(int(e))
	}
	return name
}
