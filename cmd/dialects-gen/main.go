package main

import (
	"encoding/json"
	"fmt"
	"net/http"
	"os"
	"os/exec"
	"path/filepath"
	"strings"
	"text/template"
)

var tplTest = template.Must(template.New("").Parse(
	`//nolint:golint
package {{ .PkgName }}

import (
    "testing"

    "github.com/stretchr/testify/require"

    "github.com/aler9/gomavlib/pkg/dialect"
)

func TestDialect(t *testing.T) {
    _, err := dialect.NewDecEncoder(Dialect)
    require.NoError(t, err)
}
`))

func shellCommand(cmdstr string) error {
	fmt.Fprintf(os.Stderr, "%s\n", cmdstr)
	cmd := exec.Command("sh", "-c", cmdstr)
	cmd.Stderr = os.Stderr
	cmd.Stdout = os.Stdout
	return cmd.Run()
}

func downloadJSON(addr string, data interface{}) error {
	req, err := http.NewRequest("GET", addr, nil)
	if err != nil {
		return err
	}

	res, err := http.DefaultClient.Do(req)
	if err != nil {
		return err
	}
	defer res.Body.Close()

	return json.NewDecoder(res.Body).Decode(data)
}

func processDialect(commit string, name string) error {
	fmt.Fprintf(os.Stderr, "[%s]\n", name)

	pkgName := strings.ReplaceAll(strings.ToLower(name), "_", "")

	os.Mkdir(filepath.Join("pkg", "dialects", pkgName), 0o755)

	err := func() error {
		f, err := os.Create(filepath.Join("pkg", "dialects", pkgName, "dialect_test.go"))
		if err != nil {
			return err
		}
		defer f.Close()

		return tplTest.Execute(f, map[string]interface{}{
			"PkgName": pkgName,
		})
	}()
	if err != nil {
		return err
	}

	err = shellCommand(fmt.Sprintf("go run ./cmd/dialect-import --package=%s --comment=\"%s\" %s > %s",
		pkgName,
		"Package "+pkgName+" contains the "+name+" dialect (autogenerated).",
		"https://raw.githubusercontent.com/mavlink/mavlink/"+commit+"/message_definitions/v1.0/"+name+".xml",
		filepath.Join("pkg", "dialects", pkgName, "dialect.go")))
	if err != nil {
		return err
	}

	fmt.Fprintf(os.Stderr, "\n")
	return nil
}

func run() error {
	err := shellCommand("rm -rf pkg/dialects/*/")
	if err != nil {
		return err
	}

	var res struct {
		Sha string `json:"sha"`
	}
	err = downloadJSON("https://api.github.com/repos/mavlink/mavlink/commits/master", &res)
	if err != nil {
		return err
	}

	var files []struct {
		Name string `json:"name"`
	}
	err = downloadJSON("https://api.github.com/repos/mavlink/mavlink/contents/message_definitions/v1.0?ref="+res.Sha, &files)
	if err != nil {
		return err
	}

	for _, f := range files {
		if !strings.HasSuffix(f.Name, ".xml") {
			continue
		}
		name := f.Name[:len(f.Name)-len(".xml")]

		// exclude dialects which define the version twice
		if name == "all" || name == "development" {
			continue
		}

		err = processDialect(res.Sha, name)
		if err != nil {
			return err
		}
	}

	return nil
}

func main() {
	err := run()
	if err != nil {
		fmt.Fprintf(os.Stderr, "ERR: %s\n", err)
		os.Exit(1)
	}
}
